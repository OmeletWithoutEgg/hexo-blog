<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TIOJ-1629</title>
      <link href="/2020/02/29/TIOJ-1629/"/>
      <url>/2020/02/29/TIOJ-1629/</url>
      
        <content type="html"><![CDATA[<h1 id="快樂規劃路徑"><a href="#快樂規劃路徑" class="headerlink" title="快樂規劃路徑"></a>快樂規劃路徑</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1629" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1629</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>樹朋友們生活在一個湖邊，湖邊的樹依照順時針方向編號為$1, 2, \dots n$。<br>他們想要讓自己更快樂，所以發明了一種娛樂方式，就是找到一條路徑遍歷全部$n$棵樹剛好一遍。<br>要從A樹到B樹唯一的方法就是架一條很長的梯子直直伸過去。<br>可是當然不是任何兩棵樹都可以架梯子，所以他們會先把所有可能架梯子的樹對(沒有錯字!)給你。<br>當然，(A,B)表示A可以到B、B也可以到A。<br>但是給定的遊歷路徑不能出現任兩條梯子交叉，不然可能會讓想要快樂的樹朋友發生危險。</p><p><img src="/images/TIOJ-1629/description.jpg" alt="404 QQ"></p><p>例如上圖粗線所示就是一個合法的快樂路徑。<br>給你樹的個數以及樹對，請輸出一組快樂路徑。<br>若有很多組解，樹朋友希望看到字典順序最小的那一組。</p><p>$5 \leq n \leq 1000$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>由不能交叉的條件可以推出，在某個時刻已經遍歷過的點一定是環上的一個連續區間<br>所以可以2D/0D的區間DP，並記錄最小的轉移來源</p><p>我的dp$[i][L][0]$代表的是現在站在$i$，往順時鐘方向的$L$個都已經遍歷過了，$dp[i][L][1]$也相似只是換成逆時鐘<br>因為實在想不到更好的實作方式所以寫的有夠醜，但是只要好好選到最小的轉移來源就會是字典序最小的路徑了</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1025</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> dp[N][N][<span class="number">2</span>], fr[N][N][<span class="number">2</span>], g[N][N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b, --a, --b;</span><br><span class="line">        g[a][b] = g[b][a] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) dp[i][<span class="number">1</span>][<span class="number">0</span>] = dp[i][<span class="number">1</span>][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> L = <span class="number">2</span>; L &lt;= n; L++) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// dp[i][L][0]</span></span><br><span class="line">        <span class="keyword">if</span>(dp[(i+<span class="number">1</span>)%n][L<span class="number">-1</span>][<span class="number">0</span>] &amp;&amp; g[(i+<span class="number">1</span>)%n][i]) &#123; <span class="comment">// (i+1)%n</span></span><br><span class="line">            fr[i][L][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][L][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[(i+L<span class="number">-1</span>)%n][L<span class="number">-1</span>][<span class="number">1</span>] &amp;&amp; g[(i+L<span class="number">-1</span>)%n][i]) &#123; <span class="comment">// (i+L-1)%n</span></span><br><span class="line">            <span class="keyword">if</span>(!dp[i][L][<span class="number">0</span>] || (i+<span class="number">1</span>)%n &gt; (i+L<span class="number">-1</span>)%n)</span><br><span class="line">                fr[i][L][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            dp[i][L][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dp[i][L][1]</span></span><br><span class="line">        <span class="keyword">if</span>(dp[(i+n<span class="number">-1</span>)%n][L<span class="number">-1</span>][<span class="number">1</span>] &amp;&amp; g[(i+n<span class="number">-1</span>)%n][i]) &#123; <span class="comment">// (i+n-1)%n</span></span><br><span class="line">            fr[i][L][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            dp[i][L][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[(i+n+<span class="number">1</span>-L)%n][L<span class="number">-1</span>][<span class="number">0</span>] &amp;&amp; g[(i+n+<span class="number">1</span>-L)%n][i]) &#123; <span class="comment">// (i+n+1-L)%n</span></span><br><span class="line">            <span class="keyword">if</span>(!dp[i][L][<span class="number">1</span>] || (i+n<span class="number">-1</span>)%n &gt; (i+n+<span class="number">1</span>-L)%n)</span><br><span class="line">                fr[i][L][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            dp[i][L][<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][n][<span class="number">0</span>] || dp[i][n][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">2</span>; c++) <span class="keyword">if</span>(dp[i][n][c]) &#123;</span><br><span class="line">                <span class="keyword">int</span> d = c;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vv;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> L = n; L &gt;= <span class="number">1</span>; L--) &#123;</span><br><span class="line">                    vv.push_back(i);</span><br><span class="line">                    <span class="comment">// cerr&lt;&lt;dp[i][L][d]&lt;&lt;',';</span></span><br><span class="line">                    <span class="keyword">int</span> f = fr[i][L][d];</span><br><span class="line">                    <span class="keyword">if</span>(d) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(f) &#123;</span><br><span class="line">                            i = (i+n+<span class="number">1</span>-L)%n;</span><br><span class="line">                            d = <span class="number">0</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            i = (i+n<span class="number">-1</span>)%n;</span><br><span class="line">                            d = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(f) &#123;</span><br><span class="line">                            i = (i+L<span class="number">-1</span>)%n;</span><br><span class="line">                            d = <span class="number">1</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            i = (i+<span class="number">1</span>)%n;</span><br><span class="line">                            d = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ans.empty() || vv &lt; ans) ans = vv;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x: ans) <span class="built_in">cout</span> &lt;&lt; x+<span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> IOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1505</title>
      <link href="/2020/02/27/TIOJ-1505/"/>
      <url>/2020/02/27/TIOJ-1505/</url>
      
        <content type="html"><![CDATA[<h1 id="Assssss"><a href="#Assssss" class="headerlink" title="Assssss!!"></a>Assssss!!</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1505" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1505</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>現在有一個正整數構成的除法數列</p><p>$<br>x_1 / x_2 / x_3 / \dots / x_n<br>$</p><p>請問是否有一種加上括號的方法使得最後運算的結果是整數?<br>$2 \leq n \leq 10^5, 1 \leq x_i \leq 10^9$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>加上括號之後每個數字會被放到分母或分子，想當然而放在分子的數字越多越好<br>可以發現$x_2$會恰好被放到分母一次，因此在最後他一定是當分母的<br>而我們可以構造出一個方法讓除了$x_2$最後當分母以外，其他數字都當分子</p><script type="math/tex; mode=display">(x_1 / (((x_2 / x_3) / x_4) / x_5 \dots)) = \frac{x_1 x_3 x_4 x_5 \dots x_n}{x_2}</script><p>由於$x_2$最後一定會待在分母，只要檢查其他數字的乘積是否可以被$x_2$整除就好了<br>記得 <code>long long</code> 的問題</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> B = <span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[B], *p, *q;</span><br><span class="line">    <span class="keyword">if</span>(p == q &amp;&amp; (q=(p=buf)+fread(buf,<span class="number">1</span>,B,<span class="built_in">stdin</span>)) == buf) <span class="keyword">return</span> EOF;</span><br><span class="line">    <span class="keyword">return</span> *p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nextint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span>) c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">'0'</span>) x=x*<span class="number">10</span>+(c^<span class="string">'0'</span>), c=readchar();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = nextint();</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nextint();</span><br><span class="line">        <span class="keyword">int</span> res = nextint(), mod = nextint();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) res = <span class="number">1L</span>L * res * nextint() % mod;</span><br><span class="line">        <span class="built_in">puts</span>(res ? <span class="string">"zzz..."</span> : <span class="string">"Asssss!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1219</title>
      <link href="/2020/02/25/TIOJ-1219/"/>
      <url>/2020/02/25/TIOJ-1219/</url>
      
        <content type="html"><![CDATA[<h1 id="發糖果囉"><a href="#發糖果囉" class="headerlink" title="發糖果囉"></a>發糖果囉</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1219" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1219</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>求符合$1 \leq x \leq n, 1 \leq y \leq m$且$x,y$的最大公因數是$g$的數對有多少對<br>有多筆測試資料，$1 \leq n, m, g \leq 50000$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>莫比烏斯反演</p><h3 id="lemma"><a href="#lemma" class="headerlink" title="lemma"></a>lemma</h3><script type="math/tex; mode=display">\sum_d \mu(d) [d | x] = [x = 1]</script><p>拿來簡化 $[\gcd(i,j)=1]$ 的部分，再想辦法換一下$\sum$的位置</p><script type="math/tex; mode=display">\begin{align*} %*\sum_{i=1}^n \sum_{j=1}^m [\gcd(i, j) = g] &= \sum_{i=1}^{\lfloor n/g \rfloor} \sum_{j=1}^{\lfloor m/g \rfloor} [\gcd(i, j) = 1] \\\sum_{i=1}^N \sum_{j=1}^M \sum_g \mu(g) \cdot [g | \gcd(i, j)]&= \sum_g \mu(g) \sum_{i=1}^N \sum_{j=1}^M [g | \gcd(i, j)] \\&= \sum_g \mu(g) {\lfloor \frac{N}{g} \rfloor} {\lfloor \frac{M}{g} \rfloor}\end{align*} %*</script><p>預處理$\mu$的前綴，利用數論分塊可以做到$\mathcal{O}(N + Q \sqrt{N})$</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50025</span>;</span><br><span class="line"><span class="keyword">bool</span> sv[N];</span><br><span class="line"><span class="keyword">int</span> mu[N], smu[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prs;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!sv[i]) prs.emplace_back(i), mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p: prs) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*p &gt;= N) <span class="keyword">break</span>;</span><br><span class="line">            sv[i*p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p) &#123;</span><br><span class="line">                mu[i*p] = -mu[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mu[i*p] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) smu[i] = smu[i<span class="number">-1</span>]+mu[i];</span><br><span class="line">    <span class="keyword">int</span> n, m, g;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;g), n || m || g) &#123;</span><br><span class="line">        n /= g, m /= g;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n &amp;&amp; i &lt;= m; i = j) &#123;</span><br><span class="line">            j = min(n/(n/i), m/(m/i))+<span class="number">1</span>;</span><br><span class="line">            ans += <span class="number">1L</span>L * (smu[j<span class="number">-1</span>] - smu[i<span class="number">-1</span>]) * (n/i) * (m/i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2140</title>
      <link href="/2020/02/25/TIOJ-2140/"/>
      <url>/2020/02/25/TIOJ-2140/</url>
      
        <content type="html"><![CDATA[<h1 id="殿壬愛序列"><a href="#殿壬愛序列" class="headerlink" title="殿壬愛序列"></a>殿壬愛序列</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1102" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1102</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給你一個長度為$N$的序列$a_1, a_2, \dots, a_N$，並且依序執行$Q$個操作，每個操作可能是</p><ul><li><code>1 x y</code>：把$a_x$設成$y$</li><li><code>2 L R k</code>：對於每個$i \in [L, R]$，把$a_i$設成$\lfloor \frac{a_i}{k} \rfloor$。其中$\lfloor x \rfloor$代表不大於$x$的最大整數</li><li><p><code>3 L R</code>：請輸出$a_L, a_{L+1}, \dots, a_R$的絕對眾數，如果絕對眾數不存在請輸出-1。一個數字若為$T$個數字的絕對眾數，代表這個數字至少在$T$個數字中出現$\lfloor \frac{T+2}{2} \rfloor$次。</p></li><li><p>$1 \leq N, Q \leq 10^5$</p></li><li>$1 \leq L \leq R \leq N$</li><li>$1 \leq x \leq N$</li><li>$0 \leq a_i, y \leq 10^9$</li><li>$1 \leq k \leq 10^9$</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>打架線段樹的裸題<br>對每個節點維護val和win，分別表示那個區間打贏的數字以及他贏了多少(?)<br>合併的時候假如兩個區間的val一樣，那麼他們的win就會相加<br>不同的話就是讓他們打架! win比較多的一方獲勝，但是必須減去對方的win<br>詳細請看<code>node operator+</code>的部分</p><p>一個區間的絕對眾數一定是打贏的數字，但是打贏的數字不一定是絕對眾數<br>得到一個區間打贏的數字之後，我們得知道這個數字到底在這個區間出現幾次<br>我們可以開rank tree對每個數字$x$紀錄$a_i=x$的index<br>只要知道$l,r$在rank tree的名次就能知道$l, r$之間有多少數字是$x$</p><p>至於區間除法就是暴力去做，如果該區間不全為$0$就遞迴計算直到葉節點<br>每個葉節點最多就被暴力除$\log C$次，每次暴力除最多影響另外$\log N$個節點，還有rank tree的一個$\log N$<br>即使有單點更新，也只會貢獻$\log C \log N$的複雜度<br>注意除以$1$不會讓$\log C$次是好的，不過他不會影響答案所以請記得略過</p><p>總複雜度大概是$\mathcal{O}((N+Q) \log N \log C)$吧</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100025</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,rbt&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zkw</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val,win,isZero;</span><br><span class="line">        node() : val(<span class="number">-1</span>), win(<span class="number">0</span>), isZero(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        node(<span class="keyword">int</span> x) : val(x), win(<span class="number">1</span>), isZero(x==<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        <span class="keyword">inline</span> <span class="keyword">friend</span> node <span class="keyword">operator</span>+(<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b) &#123;</span><br><span class="line">            node r;</span><br><span class="line">            <span class="keyword">if</span>(a.val == b.val) r.val=a.val, r.win=a.win+b.win;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a.win&gt;b.win) r.val=a.val, r.win=a.win-b.win;</span><br><span class="line">            <span class="keyword">else</span> r.val=b.val, r.win=b.win-a.win;</span><br><span class="line">            r.isZero = a.isZero&amp;&amp;b.isZero;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">pr</span><span class="params">(<span class="keyword">const</span> node &amp;p)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; p.val &lt;&lt; <span class="string">','</span> &lt;&lt; p.win &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; seg[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> sz, <span class="keyword">int</span> v[])</span> </span>&#123;</span><br><span class="line">        n = sz;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) seg[i+n] = node(v[i]), mp[v[i]].insert(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--) seg[i] = seg[i&lt;&lt;<span class="number">1</span>]+seg[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; p; p&gt;&gt;=<span class="number">1</span>) seg[p&gt;&gt;<span class="number">1</span>] = seg[p]+seg[p^<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        p+=n;</span><br><span class="line">        mp[seg[p].val].erase(p-n);</span><br><span class="line">        seg[p].val = k;</span><br><span class="line">        seg[p].isZero = (seg[p].val == <span class="number">0</span>);</span><br><span class="line">        mp[seg[p].val].insert(p-n);</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">brute</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(seg[i].isZero) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n) brute(i&lt;&lt;<span class="number">1</span>,k), brute(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,k), seg[i] = seg[i&lt;&lt;<span class="number">1</span>]+seg[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//else edit(i-n,seg[i].val/k);</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            mp[seg[i].val].erase(i-n);</span><br><span class="line">            seg[i].val /= k;</span><br><span class="line">            seg[i].isZero = (seg[i].val == <span class="number">0</span>);</span><br><span class="line">            mp[seg[i].val].insert(i-n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = l, R = r;</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) brute(l++,k);</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) brute(--r,k);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(L+n), pull(R<span class="number">-1</span>+n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">winner</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        node res = node();</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//debug(l), debug(r);</span></span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res = res+seg[l++];</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res = res+seg[--r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="keyword">int</span> n,q,v[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mp.reserve(N);</span><br><span class="line">    mp.max_load_factor(<span class="number">0.25</span>);</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    sgt.init(n,v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c,x,v,l,r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; v, --x;</span><br><span class="line">            sgt.edit(x,v);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; v, --l;</span><br><span class="line">            <span class="keyword">if</span>(v!=<span class="number">1</span>) sgt.div(l,r,v);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r, --l;</span><br><span class="line">            v = sgt.winner(l,r);</span><br><span class="line">            <span class="keyword">int</span> cnt = mp[v].order_of_key(r) - mp[v].order_of_key(l);</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt; (r-l)/<span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1102</title>
      <link href="/2020/02/25/TIOJ-1102/"/>
      <url>/2020/02/25/TIOJ-1102/</url>
      
        <content type="html"><![CDATA[<h1 id="E-海賊王"><a href="#E-海賊王" class="headerlink" title="E.海賊王"></a>E.海賊王</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1102" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1102</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你是一位海賊，現在有$P$個敵人與$T$個寶藏等間距圍成一圓形<br>你必須決定一個發射砲彈的方式<br>砲彈會波及的範圍是圓形的，每次發射後範圍內的海賊會被殺死，寶藏也會被毀壞<br>剩下的會重整隊形，同樣等間距圍成一圓形，且半徑不變（炮彈可以波及的半徑大於他們圍成的圈的半徑）<br>檢查過船上的砲彈存量以後，你發現一次至少要炸死兩個敵方海賊（所以剩三個海賊的話一定要一次打死三個）<br>你決定寫個程式幫你計算最多可以拿到多少未被毀壞的寶藏</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>半徑根本就是垃圾資訊XDD<br>只要炸的到的範圍比圍成的圈的範圍還要大，每次炸的就是環上的一段區間<br>總之考慮海賊之間的間隙，本題等價於選取環上許多個不相鄰的間隙使得權重最大<br>那麼顯然就直接DP，只要記得考慮環形的問題就好</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) begin(v),end(v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(v) (ll(v.size()))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_pos(v,x) (lower_bound(all(v),x)-begin(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sort_uni(v) sort(begin(v),end(v)),v.erase(unique(begin(v),end(v)),end(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v,x,sizeof v)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; pld;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> max_heap = <span class="built_in">std</span>::priority_queue&lt;T,<span class="built_in">vector</span>&lt;T&gt;,less&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> min_heap = <span class="built_in">std</span>::priority_queue&lt;T,<span class="built_in">vector</span>&lt;T&gt;,greater&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">constexpr</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-11</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">146</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">cdiv</span><span class="params">(ll x, ll m)</span> </span>&#123; <span class="keyword">return</span> x/m + ((x&lt;<span class="number">0</span> ^ m&gt;<span class="number">0</span>) &amp;&amp; (x%m)); &#125; <span class="comment">// ceiling divide</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(e%=m;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r1, r2, n, L, p[N], v[N], dp[N][<span class="number">2</span>], mx[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; r1 &gt;&gt; r2 &gt;&gt; n &gt;&gt; L, r1) &#123;</span><br><span class="line">        L += n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) v[i] = p[i]-p[i<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        v[n] = p[<span class="number">0</span>]+L-p[n<span class="number">-1</span>] - <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = mx[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = mx[<span class="number">1</span>][<span class="number">1</span>] = v[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = mx[i<span class="number">-2</span>][<span class="number">0</span>] + v[i];</span><br><span class="line">            dp[i][<span class="number">1</span>] = mx[i<span class="number">-2</span>][<span class="number">1</span>] + v[i];</span><br><span class="line">            mx[i][<span class="number">0</span>] = max(mx[i<span class="number">-1</span>][<span class="number">0</span>], dp[i][<span class="number">0</span>]);</span><br><span class="line">            mx[i][<span class="number">1</span>] = max(mx[i<span class="number">-1</span>][<span class="number">1</span>], dp[i][<span class="number">1</span>]);</span><br><span class="line">            ans = max(ans, dp[i][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span>(i != n) ans = max(ans, dp[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1798</title>
      <link href="/2020/02/23/TIOJ-1798/"/>
      <url>/2020/02/23/TIOJ-1798/</url>
      
        <content type="html"><![CDATA[<h1 id="Can-You-Arrive"><a href="#Can-You-Arrive" class="headerlink" title="Can You Arrive?"></a>Can You Arrive?</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1798" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1798</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>地鐵有$N$個站，$M$條軌道，$K$段行駛路線<br>站與站之間使用軌道連接<br>保證軌道不會形成環，且$M = N-1$</p><p>每段行駛路線代表有一輛車在兩站之間的最短路徑來回發車<br>也就是說這段路上的任意兩站都是互通的，可以直接抵達不需轉車</p><p>現在$Q$位妹子來向你問路，問你能不能從某一站經過任意多次的轉車搭到另一站。<br>保證兩站不是同一站。<br>$K \leq N \leq 10^6, M = N-1, Q \leq 10^6$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>每條行駛路線代表的就是在這條路徑上加值<br>而查詢到不到得了就是查詢路徑上有沒有$0$<br>可以採用輕重鏈剖分維護樹上路徑和<br>因為修改都在詢問之前，所以利用前綴和就好，不需要開線段樹<br>複雜度$\mathcal{O}(N + Q \log N)$</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) begin(v),end(v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(v) (ll(v.size()))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_pos(v,x) (lower_bound(all(v),x)-begin(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sort_uni(v) sort(begin(v),end(v)),v.erase(unique(begin(v),end(v)),end(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v,x,sizeof v)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; pld;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> max_heap = <span class="built_in">std</span>::priority_queue&lt;T,<span class="built_in">vector</span>&lt;T&gt;,less&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> min_heap = <span class="built_in">std</span>::priority_queue&lt;T,<span class="built_in">vector</span>&lt;T&gt;,greater&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">constexpr</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-11</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">1000025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">146</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">cdiv</span><span class="params">(ll x, ll m)</span> </span>&#123; <span class="keyword">return</span> x/m + ((x&lt;<span class="number">0</span> ^ m&gt;<span class="number">0</span>) &amp;&amp; (x%m)); &#125; <span class="comment">// ceiling divide</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(e%=m;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> sz[N], pa[N], mxs[N], top[N], dep[N], vis[N], cnt[N], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    sz[i] = <span class="number">1</span>, mxs[i] = <span class="number">0</span>, pa[i] = p, dep[i] = dep[p] + <span class="number">1</span>;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j: g[i]) <span class="keyword">if</span>(j != p) &#123;</span><br><span class="line">        dfs(j, i);</span><br><span class="line">        sz[i] += sz[j];</span><br><span class="line">        <span class="keyword">if</span>(sz[j] &gt; sz[mxs[i]]) mxs[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deco</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> t, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    vis[i] = ++tot, top[i] = t</span><br><span class="line">    <span class="keyword">if</span>(mxs[i]) deco(mxs[i], t, i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j: g[i]) <span class="keyword">if</span>(j != p &amp;&amp; j != mxs[i]) deco(j, j, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//debug("add");</span></span><br><span class="line">    <span class="keyword">while</span>(top[a] != top[b]) &#123;</span><br><span class="line">        <span class="keyword">int</span> ta = top[a], tb = top[b];</span><br><span class="line">        <span class="keyword">if</span>(dep[ta] &lt; dep[tb]) swap(a,b), swap(ta,tb);</span><br><span class="line">        <span class="comment">//debug(a), debug(b);</span></span><br><span class="line">        ++cnt[vis[ta]], --cnt[vis[a]+<span class="number">1</span>];</span><br><span class="line">        a = pa[ta];</span><br><span class="line">        <span class="comment">//int sum[100] = &#123;&#125;; for(int i = 1; i &lt;= n; i++) sum[i] = cnt[i]+sum[i-1]; for(int i = 1; i &lt;= n; i++) cout &lt;&lt; !sum[vis[i]] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[a] &lt; dep[b]) swap(a,b);</span><br><span class="line">    <span class="comment">//debug(a), debug(b);</span></span><br><span class="line">        ++cnt[vis[b]+<span class="number">1</span>], --cnt[vis[a]+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[a] != top[b]) &#123;</span><br><span class="line">        <span class="keyword">int</span> ta = top[a], tb = top[b];</span><br><span class="line">        <span class="keyword">if</span>(dep[ta] &lt; dep[tb]) swap(a,b), swap(ta,tb);</span><br><span class="line">        res += cnt[vis[a]] - cnt[vis[ta]<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">//debug(res);</span></span><br><span class="line">        a = pa[ta];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[a] &lt; dep[b]) swap(a,b);</span><br><span class="line">        assert(vis[b] &lt; vis[a]);</span><br><span class="line">        res += cnt[vis[a]] - cnt[vis[b]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//debug(res);</span></span><br><span class="line">    <span class="keyword">return</span> res == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, a, b; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        g[a].pb(b), g[b].pb(a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    deco(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        add(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] = !cnt[i];</span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; top[i] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; cnt[vis[i]] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] += cnt[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; query(a, b) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1129</title>
      <link href="/2020/02/23/TIOJ-1129/"/>
      <url>/2020/02/23/TIOJ-1129/</url>
      
        <content type="html"><![CDATA[<h1 id="聚集問題"><a href="#聚集問題" class="headerlink" title="聚集問題"></a>聚集問題</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1129" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1129</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定二維平面上$N$個點，若編號$i,j$的點之間的距離不大於$C$則他們之間有連邊<br>問最後的連通塊數量以及每個連通塊的大小</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>我想不到比$\mathcal{O}(N^2)$枚舉直接連邊更好的解了XD<br>比起DFS我更喜歡用DSU因此code是DSU</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4001</span>;</span><br><span class="line"><span class="keyword">int</span> s, n, r;</span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p[N];</span><br><span class="line"><span class="keyword">int</span> pa[N], sz[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; b)</span> </span>&#123;<span class="keyword">return</span> (a.first-b.first)*(a.first-b.first) + (a.second-b.second)*(a.second-b.second);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x==pa[x]?x:pa[x]=anc(pa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uni</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((x=anc(x)) == (y=anc(y))) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(sz[x] &lt; sz[y]) s=x, x=y, y=s;</span><br><span class="line">    pa[y] = x, sz[x] += sz[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s, &amp;n, &amp;r)) &#123;</span><br><span class="line">        p[<span class="number">0</span>] = &#123;s, s&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            p[i].first = (p[i<span class="number">-1</span>].first*<span class="number">269</span>+<span class="number">11</span>)%<span class="number">103</span>;</span><br><span class="line">            p[i].second = (p[i<span class="number">-1</span>].second*<span class="number">271</span>+<span class="number">13</span>)%<span class="number">97</span>;</span><br><span class="line">            pa[i] = i, sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(p+<span class="number">1</span>, p+n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(p[j].first - p[i].first &gt; r) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(dis(p[i],p[j]) &lt;= r*r)</span><br><span class="line">                    uni(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(pa[i] == i) ans.emplace_back(sz[i]);</span><br><span class="line">        <span class="built_in">std</span>::sort(ans.begin(), ans.end());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">int</span>(ans.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>, x);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2124</title>
      <link href="/2020/02/22/TIOJ-2124/"/>
      <url>/2020/02/22/TIOJ-2124/</url>
      
        <content type="html"><![CDATA[<h1 id="殿壬看蝴蝶"><a href="#殿壬看蝴蝶" class="headerlink" title="殿壬看蝴蝶"></a>殿壬看蝴蝶</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/2124" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2124</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>太長了，略</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>看到第五種操作就會想用平衡樹去寫這題<br>然後仔細看看就會發現第八種操作其實和其他操作都沒什麼關係，只有第三、四種操作會改變以蝴蝶編號為順序的區間和<br>所以呢對蝴蝶的編號開一個線段樹、對樹的編號開個Splay就能AC了<br>Splay只需要實現查一個節點在中序是第個、查中序第k個節點是什麼，還有剪切區間<br>至於區間和就隨便維護吧XD，code如下，我不知道該對裸題做甚麼解釋</p><p>寫剪切區間的splay的時候要注意的可能就是不要改到空節點(我是用0代表空節點)的任何值<br>也小心不要讓合併的時候合併到同一棵splay，出現環<br>中途有一次一個回傳<code>int</code>的函數忘記回傳東西，在TIOJ上吃SF</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200025</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, v[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SplayTree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val, sz;</span><br><span class="line">        <span class="keyword">int</span> sum;</span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">2</span>], pa;</span><br><span class="line">        <span class="comment">//bool rev;</span></span><br><span class="line">    &#125; S[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dir</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> i==S[S[i].pa].ch[<span class="number">1</span>];&#125;</span><br><span class="line">    <span class="comment">/*void filp(int i) &#123;</span></span><br><span class="line"><span class="comment">        int t = S[i].ch[0]; S[i].ch[0]=S[i].ch[1]; S[i].ch[1]=t;</span></span><br><span class="line"><span class="comment">        if(i) S[i].rev = !S[i].rev;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    void push(int i) &#123;</span></span><br><span class="line"><span class="comment">        if(S[i].rev) &#123;</span></span><br><span class="line"><span class="comment">            flip(S[i].ch[0]);</span></span><br><span class="line"><span class="comment">            flip(S[i].ch[1]);</span></span><br><span class="line"><span class="comment">            S[i].rev = false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    void pushdown(int i) &#123;</span></span><br><span class="line"><span class="comment">        if(S[i].pa) pushdown(S[i].pa);</span></span><br><span class="line"><span class="comment">        push(i);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        S[i].sum = S[S[i].ch[<span class="number">0</span>]].sum + S[i].val + S[S[i].ch[<span class="number">1</span>]].sum;</span><br><span class="line">        S[i].sz = S[S[i].ch[<span class="number">0</span>]].sz + <span class="number">1</span> + S[S[i].ch[<span class="number">1</span>]].sz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = S[x].pa, z = S[y].pa, d = dir(x);</span><br><span class="line">        <span class="keyword">if</span>(z) S[z].ch[dir(y)] = x;</span><br><span class="line">        S[x].pa = z;</span><br><span class="line">        S[y].ch[d] = S[x].ch[!d];</span><br><span class="line">        <span class="keyword">if</span>(S[x].ch[!d]) S[S[x].ch[!d]].pa = y;</span><br><span class="line">        S[x].ch[!d] = y;</span><br><span class="line">        S[y].pa = x;</span><br><span class="line">        pull(x), pull(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">int</span> y = S[x].pa) &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[y].pa) rot(dir(x)!=dir(y) ? x : y);</span><br><span class="line">            rot(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        splay(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//printf("k = %d\n", k);</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i; ) &#123;</span><br><span class="line">            <span class="comment">//printf("i = %d\n", i);</span></span><br><span class="line">            <span class="comment">//system("PAUSE");</span></span><br><span class="line">            <span class="keyword">int</span> s = S[S[i].ch[<span class="number">0</span>]].sz + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//printf("%d\n", s);</span></span><br><span class="line">            <span class="keyword">if</span>(s == k) <span class="keyword">return</span> splay(i), i;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; s) i = S[i].ch[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> i = S[i].ch[<span class="number">1</span>], k -= s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No such node"</span>), <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getrank</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="keyword">return</span> S[S[i].ch[<span class="number">0</span>]].sz + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">endpoint</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">bool</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(splay(i); S[i].ch[d]; i = S[i].ch[d]);</span><br><span class="line">        <span class="keyword">return</span> splay(i), i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">bool</span> d)</span> </span>&#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        <span class="keyword">int</span> res = S[i].ch[d];</span><br><span class="line">        S[res].pa = S[i].ch[d] = <span class="number">0</span>, pull(i);</span><br><span class="line">        <span class="keyword">return</span> endpoint(res, !d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        splay(a), splay(b);</span><br><span class="line">        <span class="keyword">if</span>(!a || !b || S[a].pa || a == b) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//printf("a = %d b = %d\n", a, b);</span></span><br><span class="line">        S[b].pa = a, S[a].ch[<span class="number">1</span>] = b, pull(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l, r]</span></span><br><span class="line">        <span class="keyword">int</span> a = split(l, <span class="number">0</span>), b = split(r, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = S[r].sum;</span><br><span class="line">        join(a, l), join(r, b);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//#define debug(x) printf(#x " = %d\n", x);</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jizz</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//printf("IN\n");</span></span><br><span class="line">        <span class="comment">//debug(l1); debug(r1);</span></span><br><span class="line">        <span class="keyword">int</span> a1 = split(l1, <span class="number">0</span>), b1 = split(r1, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> a2 = split(l2, <span class="number">0</span>), b2 = split(r2, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//dbg(a1); dbg(b1); dbg(a2); dbg(b2);</span></span><br><span class="line">        join(a1, l2), join(r2, b1);</span><br><span class="line">        join(a2, l1), join(r1, b2);</span><br><span class="line">        <span class="keyword">if</span>(b1 == l2) join(r2, l1);</span><br><span class="line">        <span class="comment">//if(b2 == l1) join(r1, l2);</span></span><br><span class="line">        <span class="comment">//dbg();</span></span><br><span class="line">        <span class="comment">//printf("OUT\n");</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        splay(i);</span><br><span class="line">        S[i].val = d;</span><br><span class="line">        pull(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> v[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) S[i].sz = <span class="number">1</span>, S[i].val = S[i].sum = v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            splay(i);</span><br><span class="line">            S[i].ch[<span class="number">1</span>] = i+<span class="number">1</span>, S[i+<span class="number">1</span>].pa = i;</span><br><span class="line">            pull(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        std::function&lt;int(int,int)&gt; build = [&amp;](int l, int r) &#123;</span></span><br><span class="line"><span class="comment">            if(l &gt; r) return 0;</span></span><br><span class="line"><span class="comment">            if(l == r) return l;</span></span><br><span class="line"><span class="comment">            int m = (l+r)/2;</span></span><br><span class="line"><span class="comment">            int L = build(l, m-1), R = build(m+1, r);</span></span><br><span class="line"><span class="comment">            S[m].ch[0] = L, S[m].ch[1] = R, S[L].pa = S[R].pa = m, pull(m);</span></span><br><span class="line"><span class="comment">            return m;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        build(1, n);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!i) <span class="keyword">return</span>;</span><br><span class="line">        dfs(S[i].ch[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">        dfs(S[i].ch[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dbg</span><span class="params">(<span class="keyword">int</span> i = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"SPLAY %d: "</span>, i);</span><br><span class="line">        splay(i);</span><br><span class="line">        dfs(i);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> sum[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n, <span class="keyword">int</span> v[])</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) sum[i+n] = v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) sum[i] = sum[i&lt;&lt;<span class="number">1</span>]+sum[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(sum[p+=n] = d; p &gt; <span class="number">1</span>; p &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            sum[p&gt;&gt;<span class="number">1</span>] = sum[p]+sum[p^<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l, r) 0 base</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(l+=n, r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res += sum[l++];</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res += sum[--r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d\n"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, v+i);</span><br><span class="line">    sp.init(n, v);</span><br><span class="line">    sgt.init(n+<span class="number">1</span>, v);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);</span><br><span class="line">            sp.jizz(i,i,j,j);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i, j;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);</span><br><span class="line">            i = sp.kth(i), j = sp.kth(j);</span><br><span class="line">            sp.jizz(i,i,j,j);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i, d;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;d);</span><br><span class="line">            sp.modify(i, d);</span><br><span class="line">            sgt.modify(i, d);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i, d;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;d);</span><br><span class="line">            i = sp.kth(i);</span><br><span class="line">            sp.modify(i, d);</span><br><span class="line">            sgt.modify(i, d);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l1, r1, l2, r2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line">            l1 = sp.kth(l1), r1 = sp.kth(r1), l2 = sp.kth(l2), r2 = sp.kth(r2);</span><br><span class="line">            sp.jizz(l1, r1, l2, r2);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp.kth(i));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp.getrank(i));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sgt.query(l, r+<span class="number">1</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            l = sp.kth(l), r = sp.kth(r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sp.getsum(l, r));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sp.dbg();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1884</title>
      <link href="/2020/02/20/TIOJ-1884/"/>
      <url>/2020/02/20/TIOJ-1884/</url>
      
        <content type="html"><![CDATA[<h1 id="【IOI2015】Boxes-一堆盒子"><a href="#【IOI2015】Boxes-一堆盒子" class="headerlink" title="【IOI2015】Boxes 一堆盒子"></a>【IOI2015】Boxes 一堆盒子</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1884" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1884</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有$L$個地區排成一環狀，依序編號為$0, 1, \dots, L-1$<br>從任何一個地區移動到相鄰的地區所需要的時間均為一單位時間</p><p>現在有$N$個人需要寄送貨物，他們分別住在編號為$p_1, p_2, \dots, p_n$的地區(已經依非遞減順序排序)<br>貨物中心位在編號$0$的地區，並且郵差每次只能帶至多$K$件貨物移動<br>(世界上只有一個郵差…真辛苦)<br>身上所有的貨物都送到後，必須回到$0$號地區，才能進行下一輪的送貨<br>你的任務就是幫送貨的郵差計算他最少要花多少時間<br>才能從貨物中心出發，寄送完所有貨物，最後再回到貨物中心<br>(其中可能會回貨物中心很多次以補充貨物)</p><p>$<br>1 \leq K \leq N \leq 10^7,<br>1 \leq L \leq 10^9,<br>0 \leq p_i &lt; L<br>$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先有$K=1$的Subtask，可以確定自己對題意的理解<br>可以發現題目就是要把這$N$個點分成很多堆，每堆不超過$K$個，使得總成本最小<br>一個關鍵的觀察是分的方式肯定是排序過後切成很多連續區間<br>不需要考慮$i &lt; x &lt; j$但$x$卻不和$i,j$同一堆的情形，否則可以想辦法交換一下使得答案不會變更差<br>至此可以列出DP式</p><script type="math/tex; mode=display">dp[i] = \min\limits_{\max(0, i-k) \leq j < i} \{ dp[j] + cost(j+1, i) \}</script><p>其中$cost(l, r) = \min \{L, 2p_r, 2(L-p_l)\}$<br>代表從$0$號節點開始經過$p_l, p_{l+1}, \dots, p_r$再回到$0$號節點所需要的最少時間<br>複雜度$\mathcal{O}(NK)$</p><p>令$a_i = \min(L, 2p_i), b_i = 2(L-p_{i+1})$</p><script type="math/tex; mode=display">dp[i] = \min \{dp[j] + \min(a_i, b_j)\} = \min(\min\{dp[j]\}+a_i, \min \{dp[j]+b_j\});</script><p>利用單調隊列優化可以快速求得$dp[j]$和$dp[j]+b_j$的最小值，最後的複雜度是$\mathcal{O}(N)$</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000025</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, L;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    ll dp = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;pair&lt;<span class="keyword">int</span>,ll&gt;&gt; dq[<span class="number">2</span>];</span><br><span class="line">    dq[<span class="number">0</span>].pb(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    dq[<span class="number">1</span>].pb(<span class="number">0</span>, <span class="number">2</span>*(L-p[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">/*dp[i] = INF;</span></span><br><span class="line"><span class="comment">        for(int j = max(0, i-k); j &lt; i; j++) &#123;</span></span><br><span class="line"><span class="comment">            dp[i] = min(dp[i], dp[j] + min(&#123;L, 2*v[i], 2*(L-v[j+1])&#125;));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">while</span>(dq[<span class="number">0</span>].front().ff &lt; i-k) dq[<span class="number">0</span>].pop_front();</span><br><span class="line">        <span class="keyword">while</span>(dq[<span class="number">1</span>].front().ff &lt; i-k) dq[<span class="number">1</span>].pop_front();</span><br><span class="line">        dp = min(dq[<span class="number">0</span>].front().ss+min(L,<span class="number">2</span>*p[i]), dq[<span class="number">1</span>].front().ss);</span><br><span class="line">        <span class="keyword">while</span>(dq[<span class="number">0</span>].size() &amp;&amp; dq[<span class="number">0</span>].back().ss &gt;= dp) dq[<span class="number">0</span>].pop_back();</span><br><span class="line">        <span class="keyword">while</span>(dq[<span class="number">1</span>].size() &amp;&amp; dq[<span class="number">1</span>].back().ss &gt;= dp+<span class="number">2</span>*(L-p[i+<span class="number">1</span>])) dq[<span class="number">1</span>].pop_back();</span><br><span class="line">        dq[<span class="number">0</span>].pb(i, dp);</span><br><span class="line">        dq[<span class="number">1</span>].pb(i, dp+<span class="number">2</span>*(L-p[i+<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dp[i] = min(dp[j] + min(L, 2*v[i], 2*(L-v[j]));</span></span><br><span class="line"><span class="comment">        dp[i] = min(dp[j] + min(a[i], b[j])) = min(min(dp[j])+a[i], min(dp[j]+b[j]));</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) <span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
            <tag> IOI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1828</title>
      <link href="/2020/02/20/TIOJ-1828/"/>
      <url>/2020/02/20/TIOJ-1828/</url>
      
        <content type="html"><![CDATA[<h1 id="控控控之蘿莉控"><a href="#控控控之蘿莉控" class="headerlink" title="控控控之蘿莉控"></a>控控控之蘿莉控</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1828" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1828</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你走在路上遇到了一個可愛小蘿莉，因為你的控屬性，所以你跑上去問了她的名字：「小妹妹～你叫什麼名字啊？」<br>她回答：「啊！！！你幹嘛！我不認識你啊你誰啊！！！」<br>你：「我是你的好哥哥，來和我一起玩吧～」<br>這時機智的小妹妹拿起手機打了110<br>你決定要趕快逃跑，以免進入暗無天日的深淵</p><p>於是問題來了！<br>你要跑多快才不會被抓(你只能跑<strong>整數</strong>的速度)？<br>因為警察的體力有限，不能跑超過警局外的$10000$單位距離，所以逃出$10000$單位距離就好了</p><p>第一行有一個整數$T$代表測資筆數，<br>每行有三個無號整數$X,Y,Z$<br>$X$代表你現在跟警察局的距離，<br>$Y$代表小妹妹跟警察叔叔還要在$Y$秒才會講完電話，<br>$Z$代表講完電話後警察會馬上用秒速$Z$的速度沖上來追你<br>$0 \leq X,Y,Z \leq 10^6$<br>如果講完電話後，你還待在警察局門口，是會被抓的喔<br>注意你站在距警察局恰$10000$單位距離的點上也還是會被抓的喔</p><p>請輸出ㄧ個整數代表你至少要用多少的體力才不會被追悼<br>如果不管怎麼樣都會被追到請輸出 <code>-1</code></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>是個大特判題呢<br>唯ㄧ會出現 <code>-1</code> 的case就是$X=Y=0$的時候，也就是ㄧ開始就被追上<br>首先可以知道人和警察兩個直線的差會與時間成線性<br>所以最小的差肯定是出現在端點<br>我們僅需要考慮剛出發那一刻和警察跨過$10000$那一刻，是否有被警察超前過即可<br>假設$T$是距離講完電話過了$T$秒，並且逃跑的速度是$V$<br>那麼可以列出式子</p><script type="math/tex; mode=display">X + (Y+T)V > TZ</script><p>當$T$是$0$，可以知道$V$的最小值不是$0$就是$1$，取決於$X,Y$是否為0<br>當警察跨過$10000$時，$T=10000/Z$，移項一下可以得到$V &gt; \frac{(10000-X)Z}{YZ+10000}$<br>不過注意$Z$必須不為$0$，若$Z$為$0$可以直接特判掉</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">10000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; L) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!z) <span class="keyword">return</span> !x;</span><br><span class="line">    <span class="keyword">return</span> (L-x) * ll(z) / (ll(z)*y + L) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    X + (Y+T)V &gt; min(10000, TZ)</span></span><br><span class="line"><span class="comment">    X + (Y+T)V &gt; TZ</span></span><br><span class="line"><span class="comment">    XZ + (YZ+TZ)V &gt; TZZ</span></span><br><span class="line"><span class="comment">    consider T == 10000/Z and T == 0</span></span><br><span class="line"><span class="comment">    V &gt; (10000-X)Z / (ZY+10000)</span></span><br><span class="line"><span class="comment">    X + YV &gt; 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1553</title>
      <link href="/2020/02/19/TIOJ-1553/"/>
      <url>/2020/02/19/TIOJ-1553/</url>
      
        <content type="html"><![CDATA[<h1 id="B-Game"><a href="#B-Game" class="headerlink" title="B-Game"></a>B-Game</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1553" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1553</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>B-Game是個殘酷的兩人卡片對戰遊戲(Battle Game)<br>檯面上有$n$張卡片，排成環狀，每張卡片有其數值<br>兩人輪流取卡片，只能選與已經取過的卡片相鄰的卡片，但第一個人不受此限<br>選完卡片之後，勝負決定在將兩人手中卡片的數值和<br>若某位玩家得分大於另一位玩家，無論大多少均是勝利</p><p>輸出一行包含兩個數<br>分別是一開始有幾種拿法可以讓先拿的人勝利<br>與先拿的人最多可以拿到多少</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一開始我沒有注意到環型的條件，送了好多次假解XD<br>後面還忘記%n，WA到癱軟www</p><p>現在假設先手第一步取了某張卡<br>則剩下的卡片就是環上的一段連續區間，並且不管怎麼拿都會一直保持是連續區間<br>可以透過奇偶性知道最後一步輪到誰拿，且拿的位置肯定是區間的最左邊或是最右邊<br>而對手ㄧ定會讓自己分數最低，我們則是讓分數盡量高<br>因此可以列出簡單的2D/0D轉移式，得到每個區間可以從兩頭拿時先手的最高得分<br>再加上先手第一步取得的分數就可以知道從每個地方起手先手所能得到的最高分<br>也就知道在那個位置是否有機會勝利了</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&gt;b?a:b;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">225</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, v[N], dp[N][N], sum, cnt, mx = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, v+i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) sum += v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> L = <span class="number">1</span>; L &lt;= n<span class="number">-1</span>; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n-L &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][L] = min(dp[i][L<span class="number">-1</span>], dp[(i+<span class="number">1</span>)%n][L<span class="number">-1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][L] = max(dp[i][L<span class="number">-1</span>]+v[(i+L<span class="number">-1</span>)%n], dp[(i+<span class="number">1</span>)%n][L<span class="number">-1</span>]+v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; dp[i][L] &lt;&lt; ' ';</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; '\n';</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for(int i = 0; i &lt; n; i++) cout &lt;&lt; v[i]+dp[(i+1)%n][n-1] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">    <span class="comment">//debug(sum);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = v[i]+dp[(i+<span class="number">1</span>)%n][n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(t &gt; mx) mx = t;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; sum-t) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, cnt, mx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1274</title>
      <link href="/2020/02/16/TIOJ-1274/"/>
      <url>/2020/02/16/TIOJ-1274/</url>
      
        <content type="html"><![CDATA[<h1 id="純屬無聊-Tie-Breaker"><a href="#純屬無聊-Tie-Breaker" class="headerlink" title="[純屬無聊] Tie Breaker"></a>[純屬無聊] Tie Breaker</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1274" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1274</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>本題考驗你對小向的試煉題敘的理解程度。請回答以下三個問題：</p><ol><li>假設2-2的圖來自遊戲「甲」(一個包含五個字母的單字)，2-3的圖來自動畫「乙」(一個包含九個字母的單字 ，請問甲和乙中字母e出現幾次？</li><li>假設3-1的圖來自動畫「丙」(包含四個中文字)，3-3的圖來自漫畫「丁」(包含六個中文字) ，請問丙和丁中聲調為二聲的字有幾個？</li><li>假設4-1的圖來自動畫「戊」(包含八個中文字，其中第五個字是三聲)，4-2的圖來自動畫「己」(包含四個中文字)，4-3的圖來自動畫「庚」(包含六個中文字) ，且令為己的前兩個字翻譯成英文後的字母數，為戊的第二個字所代表的數字 ，「辛」是「庚」的第一個字。請問「辛」倍的x+y是幾？</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>註: 小向的試煉是TIOJ上一系列的題目，可以自行搜尋</p><p>甲 = Deemo 乙 = charlotte<br>第一點的答案 = 3<br>丙 = 遊戲人生 丁 = 我的英雄學院<br>第二點的答案 = 4<br>戊 = 中二病也想談戀愛 己 = 東京闇鴉 庚 = 雙星之陰陽師<br>第三點的答案 = 2 * (5 + 2) = 14</p><p>這題是考驗油度或是google程度，不過casper用猜的猜出答案，好糟糕</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csdtio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>&#125;, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1511</title>
      <link href="/2020/02/15/TIOJ-1511/"/>
      <url>/2020/02/15/TIOJ-1511/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-A-雷射防護網"><a href="#Problem-A-雷射防護網" class="headerlink" title="Problem A. 雷射防護網"></a>Problem A. 雷射防護網</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1511" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1511</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>考慮在正$n$邊形的頂點中任選三點形成的三角形，請統計分別有幾個銳角三角形、直角三角形和鈍角三角形<br>注意：兩個三角形被視為不同的，若且唯若三個頂點的編號不完全相同，並且不可以旋轉三角形<br>$n \leq 10^6$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>簡單排列組合，不過我寫好久還踩到一些坑<br>直角的case很容易解決，因為斜邊必須要是外接圓的直徑，故$n$得是偶數<br>而所有$n/2$條直徑對應的直角三角形個數就是$2(n/2-1)$</p><p>接著我們先計算鈍角的case<br>固定鈍角那個頂點，假設三個角的角度分別等於$a, b, c$個邊(因為是正多邊形所以可以這樣統計)，且$a &gt; b,c$<br>那麼所有鈍角三角形的個數就等於$a+b+c = n$且$a &gt; n/2$的正整數解的個數<br>此時枚舉$a$，$b+c=n-a$有$n-a-1$組正整數解，可以知道所求即是</p><script type="math/tex; mode=display">\sum_{a = \left \lfloor n/2 \right \rfloor + 1} ^ {n-2} n-a-1 = \sum_{i=1}^{n-2 - \left \lfloor n/2 \right \rfloor} i = \frac{(n-2 - \left \lfloor n/2 \right \rfloor) (n-2 - \left \lfloor n/2 \right \rfloor + 1)}{2}</script><p>記得要乘上$n$，代表以每個頂點當作鈍角頂點<br>又所有三角形的個數就是$\binom{n}{3} = \frac{n(n-1)(n-2)}{6}$<br>扣掉直角及鈍角的個數就是銳角的個數了</p><p>這裡比較慘的是雖然題目的範圍似乎不會讓答案超過 <code>long long</code><br>但計算所有三角形個數的時候可能會溢位<br>因此在計算銳角三角形時我先把一個$n/3$提出來，再想辦法好好約分</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">string</span> s, _;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; _) &#123;</span><br><span class="line">        ll h = n/<span class="number">2</span>; <span class="comment">// half</span></span><br><span class="line">        ll right = n&amp;<span class="number">1</span> ? <span class="number">0</span> : n*(h<span class="number">-1</span>);</span><br><span class="line">        ll tmp = n<span class="number">-2</span>-h;</span><br><span class="line">        ll obtuse = tmp*(tmp+<span class="number">1</span>)/<span class="number">2</span>*n;</span><br><span class="line">        <span class="comment">// (# a + b + c = n, max(a,b,c) &gt; n/2)</span></span><br><span class="line">        <span class="comment">// (sum_&#123;a = n/2+1&#125;^&#123;n-2&#125; n-a-1) = sum_&#123;i=1&#125;^&#123;n-2-n/2&#125; i</span></span><br><span class="line">        <span class="comment">// tot = n*(n-1)*(n-2)/6</span></span><br><span class="line">        ll acute = (n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span> - tmp*(tmp+<span class="number">1</span>)/<span class="number">2</span>*<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            acute *= n/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            acute /= <span class="number">3</span>, acute *= n;</span><br><span class="line">        acute -= right;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">"Right"</span>[<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; right &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">"Acute"</span>[<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; acute &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">"Obtuse"</span>[<span class="number">0</span>])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; obtuse &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1202</title>
      <link href="/2020/02/09/TIOJ-1202/"/>
      <url>/2020/02/09/TIOJ-1202/</url>
      
        <content type="html"><![CDATA[<h1 id="重疊的天際線"><a href="#重疊的天際線" class="headerlink" title="重疊的天際線"></a>重疊的天際線</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1202" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1202</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>地平線上有許多房子，而這些房子在夕陽的照射之下形成有趣的輪廓，我們稱之為天際線(Skyline)。為了方便起見，你可以假設所有的房子都是一個位在2D平面上的矩形，並且有一條邊貼在這個假想2D平面上的X軸。</p><p>一棟建築可以用三元數組$(L_i, H_i, R_i)$來表示，依序代表該建築物的左界座標、高度、右界座標。<br>下圖中的八棟建築就是用此方法表示就是<br>$(1,11,5), (2,6,7), (3,13,9), (12,7,16), (14,3,25), (19,18,22), (23,13,29), (24,4,28)$。</p><p><img src="/images/TIOJ-1202/description.gif" alt=""></p><p>一個天際線也可以用類似的「X-遞增序列」表示出來，例如上面的八棟建築合併之後上方右圖的天際線可表示為：<br>$(1, 11, 3, 13, 9, 0, 12, 7, 16, 3, 19, 18, 22, 3, 23, 13, 29, 0)$</p><p>請你寫一個程式，給你這些房子的位置，請你把它們形成的天際線描述出來。<br>對於每一筆測試資料，請按照題目以及範例輸出格式輸出天際線的樣子。<br>請注意，最後一個數字一定是0。也請不要輸出多餘空白。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>考慮所有矩形的邊界上的點，我們只要確定這些點的最大高度就能夠描述這個天際線<br>更進一步的話題目要求的格式甚至只需要考慮左界這個點<br>因此我們維護一個 <code>multiset</code><br>從左到右考慮所有邊界，對於任一個建築物的高度$H$，都在$L$的時候加進 <code>multiset</code> 裡面然後在$R$的時候刪掉<br>如果這個點的高度和前一次的答案一樣就不需要加進答案裡面</p><p>注意輸出格式QQ，一開始還吃WA好幾次</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">array</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,2&gt;&gt; mp;</span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ms&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> L, H, R;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; L &gt;&gt; H &gt;&gt; R;</span><br><span class="line">            mp[L][<span class="number">0</span>].push_back(H);</span><br><span class="line">            mp[R][<span class="number">1</span>].push_back(H);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;V: mp) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = V.ff;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;in = V.ss[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;ou = V.ss[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> h: in) ms.insert(h);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> h: ou) ms.erase(ms.find(h));</span><br><span class="line">            <span class="keyword">int</span> H = *--ms.end();</span><br><span class="line">            <span class="keyword">if</span>(ans.empty() || ans.back().ss != H) ans.pb(p,H);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans[i].ff &lt;&lt; <span class="string">' '</span> &lt;&lt; ans[i].ss &lt;&lt; (i+<span class="number">1</span> == ans.size() ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1156</title>
      <link href="/2020/02/08/TIOJ-1156/"/>
      <url>/2020/02/08/TIOJ-1156/</url>
      
        <content type="html"><![CDATA[<h1 id="5-高中運動會"><a href="#5-高中運動會" class="headerlink" title="5.高中運動會"></a>5.高中運動會</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1156" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1156</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>夢幻城市每年為全市高中生舉辦一次運動大會。為促進各校同學之間的交流，採用特別的分隊方式：每一個學校的同學，必須被均勻分散到各隊，使得每一隊中該校的人數皆相同。為增加比賽的競爭性，希望分成越多隊越好。你的任務是由各校的人數，決定最多可分成的隊數。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>沒想到全國賽竟然有這麼水的題目XDD，題目所求就是所有學校人數的最大公因數<br>用 <code>__gcd</code> 就足夠了，不過我覺得這份code寫起來很簡短所以我想貼出來ouo，順便加了個輸入優化</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> B = <span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[B], *p, *q;</span><br><span class="line">    <span class="keyword">if</span>(p == q &amp;&amp; (q=(p=buf)+fread(buf,<span class="number">1</span>,B,<span class="built_in">stdin</span>)) == buf) <span class="keyword">return</span> EOF;</span><br><span class="line">    <span class="keyword">return</span> *p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nextint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span>) c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">'0'</span>) x=x*<span class="number">10</span>+(c^<span class="string">'0'</span>), c=readchar();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">int</span> t = b) b = a%b, a = t;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nextint(), g = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--) g = gcd(g, nextint());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1600</title>
      <link href="/2020/01/26/TIOJ-1600/"/>
      <url>/2020/01/26/TIOJ-1600/</url>
      
        <content type="html"><![CDATA[<h1 id="爆炸吧現充"><a href="#爆炸吧現充" class="headerlink" title="爆炸吧現充~"></a>爆炸吧現充~</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1600" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1600</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>求共有幾個滿足</p><script type="math/tex; mode=display">1 \leq x \leq n \\\exists k > 1, k^2 | x</script><p>的$x$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一開始我的想法是$[\mu(x)=0]$的前綴，想說用杜教篩或莫比烏斯反演什麼的，但怎麼推都推不出來<br>去問王政祺之後，他說直接枚舉平方數再排容就好，至於排容的係數就直接取$\mu$</p><p>令</p><script type="math/tex; mode=display">S_k = \{x | 1 \leq x = k^2t \leq n\}</script><p>則答案就是</p><script type="math/tex; mode=display">\begin{matrix}|\bigcup_{k} S_k| &= & (|S_2| + |S_3| + |S_5| + |S_7| + \cdots) \\  &- & (|S_6|+|S_{10}|+|S_{14}|+|S_{15}|+ \cdots) \\  &+ & (|S_{30}|+|S_{42}|+|S_{66}|+|S_{70}|+ \cdots) \\ &  & \vdots \\ &= & \sum -\mu(k) |S_k| \\ &= & -\sum\limits_{k=2}^\sqrt{n} \mu(k) \frac{n}{k^2}\end{matrix}</script><p>依照不同質因數去分類，可以發現排容的正負號和$\mu$一致(我也不太會證明最後的部分QQ)<br>看來我的思維要再靈活一些 &gt; &lt;</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll</span><br><span class="line"><span class="keyword">const</span> ll N = <span class="number">1000025</span>;</span><br><span class="line"><span class="keyword">int</span> mu[N],np[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prs;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = np[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!np[i]) prs.push_back(i), mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p: prs) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*p &gt;= N) <span class="keyword">break</span>;</span><br><span class="line">            np[i*p] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p) &#123;</span><br><span class="line">                mu[i*p] = -mu[i];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mu[i*p] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>, n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i = <span class="number">2</span>; i*i &lt;= n; i++) ans -= n / (i*i) * mu[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1283</title>
      <link href="/2020/01/25/TIOJ-1283/"/>
      <url>/2020/01/25/TIOJ-1283/</url>
      
        <content type="html"><![CDATA[<h3 id="Author-Sean-Liu"><a href="#Author-Sean-Liu" class="headerlink" title="Author: Sean Liu"></a>Author: Sean Liu</h3><h1 id="超大畫框設置"><a href="#超大畫框設置" class="headerlink" title="超大畫框設置"></a>超大畫框設置</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1283" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1283</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在一個「漸進式框架」當中，你想要找到一個最大面積的矩形位置放置你最喜愛的一幅畫。</p><p>當然地，畫框必須掛正，所以矩形的四個邊都必須與框架的邊平行或垂直。</p><p>所謂的「漸進式框架」，指的是任何一個水平線截出的框架區段是連續，並且由上往下該區段只會往右移動，如下圖</p><p><img src="/images/TIOJ-1283/description.png" alt=""></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這個是蕭梓宏在超級久之前講的四邊形優化題目，筆者發現已經過了一年多了還沒AC就想說來寫看看好了！這一題不難想到，對於每一個在下面的線，都計算是哪一條在上面的線和它搭配會有最佳，再取$\max$就好了。不過，這樣需要$O(MN)$的時間，頗爛。</p><p>不過呢，還可以觀察（且證明）一個性質，就是：倘若$L(x)$為下面的線中第$x$條線所對應到的最佳（面積最大）的上面的線的編號，則$L(x + 1) \geq L(x)$！有了這個性質，大概就可以維護一個<code>deque</code>，裡面放一堆東西$(L, R, I)$來維護說：上面第$I$條線可以轉移下面第$L$到第$R$的線為最佳。一開始只有一個$(0, M, 0)$，然後每次進來一個上面的線段就開始判斷（假設目前<code>deque</code>中最後面的元素為$(L, R, I)$，且目前我在第$X$條）：</p><ul><li>若$X$和$L$的矩形比$I$和$L$的矩形還大，這代表$(L, R, I)$這個區間可以完全不要了，<code>pop</code>掉</li><li>若$X$和$M - 1$的矩形比$I$和$M - 1$的矩形還小（也就是最後一個），則代表我永遠贏不了那一條線，我就直接<code>break</code>了，反正贏不了</li><li>否則，開始二分搜說我到哪裡可以贏$(L, R, I)$，也就是說，找一個最小的$m$使得$m$和$I$的矩形小於或等於$m$和$X$的矩形</li></ul><p>維護完之後，再掃一次$M$條線取$\max$就好了！ </p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><p>感覺寫完到AC的時間還不會很久，但是中間有一堆小細節被卡（還有二分搜寫錯、被卡<code>long long</code>、$N, M$要除以二、面積計算出錯等有趣環節），幸好沒有太大的問題！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ericxiao ios_base::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> h, l, r;</span><br><span class="line">    Line()&#123;&#125;</span><br><span class="line">    Line(<span class="keyword">int</span> h, <span class="keyword">int</span> l, <span class="keyword">int</span> r): h(h), l(l), r(r)&#123;&#125;</span><br><span class="line">&#125; line, ups[maxN], downs[maxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        l, r: from 0 ~ M - 1, bottom</span></span><br><span class="line"><span class="comment">        id: 0 ~ N - 1, top</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Seg()&#123;&#125;</span><br><span class="line">    Seg(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id): l(l), r(r), id(id)&#123;&#125;</span><br><span class="line">&#125; current;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; <span class="number">0</span>) ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">area</span><span class="params">(Line u, Line d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (u.r - d.l) * (d.h - u.h); <span class="comment">//Don't ABS here :(</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;Seg&gt; trans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, r, d, cx, cy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ericxiao;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    N /= <span class="number">2</span>;</span><br><span class="line">    cx = cy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123; <span class="comment">// - | - |</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; r &gt;&gt; d;</span><br><span class="line">        ups[i] = Line(cy, cx, cx + r);</span><br><span class="line">        cx += r;</span><br><span class="line">        cy += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    M /= <span class="number">2</span>;</span><br><span class="line">    cx = cy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123; <span class="comment">// | - | - | - | -</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; d &gt;&gt; r;</span><br><span class="line">        downs[i] = Line(cy + d, cx, cx + r);</span><br><span class="line">        cx += r;</span><br><span class="line">        cy += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(trans.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = trans.back().id;</span><br><span class="line">            <span class="keyword">if</span>(area(ups[id], downs[trans.back().l]) &lt;= area(ups[i], downs[trans.back().l])) trans.pop_back();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(trans.size())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = trans.back().id, L = trans.back().l, R = trans.back().r, MID;</span><br><span class="line">            <span class="keyword">if</span>(area(ups[id], downs[M - <span class="number">1</span>]) &gt; area(ups[i], downs[M - <span class="number">1</span>])) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(L + <span class="number">1</span> &lt; R)&#123;</span><br><span class="line">                MID = (L + R) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(area(ups[id], downs[MID]) &lt;= area(ups[i], downs[MID])) R = MID;</span><br><span class="line">                <span class="keyword">else</span> L = MID;</span><br><span class="line">            &#125;</span><br><span class="line">            trans.back().r = L;</span><br><span class="line">            trans.push_back(Seg(L, M, i));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            trans.push_back(Seg(<span class="number">0</span>, M, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(trans.size() &amp;&amp; trans.front().r &lt;= i) trans.pop_front();</span><br><span class="line">        ans = max(ans, area(ups[trans.front().id], downs[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOICamp-2020</title>
      <link href="/2020/01/25/IOICamp-2020/"/>
      <url>/2020/01/25/IOICamp-2020/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-IOIC-小記"><a href="#2020-IOIC-小記" class="headerlink" title="2020 IOIC 小記"></a>2020 IOIC 小記</h1><p>五天都11點回家 好累喔<br>不過聽到很多神奇技巧和神奇題目(?)</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>早上是常數優化與電腦結構，看到一些毒瘤的東東還有會造成我常數大的一些寫法</p><p>中午有貓貓時間，電仁分享了他競程的心得之後，丟給我們一些題目<br>可是我幾乎都不會做QQ<br>下午塗大為的DP&amp;圖論，速度超快的www趕火車<br>聽到有點快要睡著，超難</p><p>晚上趣味賽有一個隊友還沒來QQ，不過這種類型的題目真棒<br>空白、tab和換行不算edit distance的規則沒有想到能讓註解佔了好多除蟲題的名額XD</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>資料結構初階OwO!<br>直接從前一天下午的惡夢變成舒適的溫水浴，於是我決定自己翻講義刷題<br>可是圖論超煩躁，DP我也不會SCC我也一直寫爛，搞了快半天AC不了半題WTF<br>最後還被卡記憶體，直接怒不寫了QQ<br>下午原本是數學被換成根號算法，因為蔣立元有講過蠻多的所以YP這堂還算友善(?)<br>聽到很多有趣的題目，不過可惜我前一天自己看講義被捏到一些QQ<br>除了2的冪次分層(不知道怎麼用)以外都蠻喜歡的<br>因為分塊就是優美的暴力(O)</p><p>第一場個人賽，實在是打的有點差<br>pA被我擱置，聽到解法之後覺得超顯然QQ為甚麼我賽中不開啊<br>開場就碰pF，碰到結尾還AC不了，到底三小<br>我已經自認locality很好了欸QAQ而且取模乘法加法都有好好寫啊 早知道就多試一點順序了<br>pC開的極慢，DP式一直推不出來，有夠爛，還一直亂猜加一減一吃WA吃滿<br>pE水題太慢看到ww在附中練習賽有寫過所以速速AC<br>pD樹重心，推導一下式子之後想到二分搜祖先再加上去(題解後感覺這個解超爛QQ)<br>pG是樹上莫隊裸題，但我不知道為甚麼沒自信寫(X)<br>時間全都砸在pB，想到一個實作又臭又長的作法，花了好久實作之後TLE<br>到結束沒時間再寫出一題QQ<br>結束之後YP跟我說我差一點AC pB，要用degree分塊才不會爛掉(我就爛)</p><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p>早上字串，幾乎都是聽了n遍之後已經大概知道的東西(?)<br>AC前一天pB之後有點不知道要做啥<br>於是我試著刻了AC自動機，參考了一下講義上的code之後傳到TIOJ 1306得到SF<br>我想說是不是我空間開錯，怎麼開都會SF，看了一下其他人的AC code發現他們都開4e5<br>然後我開了還是SF，後來才發現是我有地方寫錯@_@<br>後面唯一覺得有興趣的後綴自動機仍然沒有聽懂(?)雖然之前在講師小莫的blog上面看過了不過還是感覺好複雜<br>隨機和近似實在是不太容易通靈出來，有些只要直覺的隨便亂做多次一點就足夠AC<br>但是竟然有要先自己創造另一個題目的算法XD太難啦</p><p>團體賽總算是有了第三個隊友<br>pH是裸題，pI是水題，隊友找出來之後我趕緊水掉<br>剩下根本找不出來甚麼題目可做XD<br>pD是簡單DP，可是我一直WA，還好隊友有提醒我一些鬼邊界狀況<br>剩下時間花了好多開pJ，結果還漏看一個條件，而且在樹上的想法也是錯的QQ<br>pB以為是簡單結論題沒想到原來是奇怪的經典題(?)<br>pC也應該猜一猜在賽中寫出來的，有點可惜</p><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>電石的資結進階，除了Pattern以外都有稍微聽過(線段樹優化建圖是在某一次蕭梓宏選的virtual場看到的XD)<br>CDQ分治更是直接聽電石本人講過ww<br>Pattern這東西好神奇喔，我想還要好久我才能通透，感覺題目再一些變化的話我就看不出來了<br>下午是數學，但在上課之前出現神秘講師短短的講了Splay和LCT就不見了XD(聽說他是原本FFT的講師?)<br>中堂休息之後突然就切換到數學模式，頓時有種我不會數學的感覺，明明聽過那麼多東西卻無法好好應用<br>(也許我應該去精進我的數學實力? 要怎麼讀啊?)</p><p>個人賽一開始有想法只有pB，看到Scoreboard上面大家都AC pD就猜是水結論題直接給他猜結論下去XDD<br>接著花時間把pB寫掉了，雖然看到一些人在丟pC不過沒什麼想法，反而翻到pE是今天電石上課直接講過的東西XD<br>因為印象很深所以想說要自己刻出來，不過最後還是參考了一些講義的細節想法QQ<br>幸運的搶到pF首殺之後發現pC其實好水，寫掉之後就沒事做了(?)</p><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h2><p>正式賽，長達五小時<br>看著Dashboard pA pG寫掉<br>接著大家都寫出了pM，隊友給我想法之後我一直瘋狂WA，賽中也看不到各個testcase的狀況，根本不知道是全錯還是edge case QQ<br>第一筆submission是11:50，到12:40都還在debug，結果是測資出問題，找不到不存在的bug是理所當然QQ<br>記分板上大家都寫了pK pL，但我覺得pK構造沒有甚麼想法，pL初步認為是greedy(都列出DP式了還不會算複雜度，我就爛)<br>pH裸題應該早點開但我沒開<br>pI不知道為什麼一直吃WA<br>pE也是前幾天講過的題目，應該要想到的<br>營隊最後一場比賽打得不太好真可惜QQ</p><h2 id="一些忘了時間點的事情"><a href="#一些忘了時間點的事情" class="headerlink" title="一些忘了時間點的事情"></a>一些忘了時間點的事情</h2><ol><li>披薩好好吃</li><li>誰那麼ㄎㄧㄤ在吃披薩的時候放佛教動起來和叫品翔唱附中校歌</li><li>每天都有nut，每天都有bug</li><li>被張程凱拉去辦了Ubike的帳戶，之後幾天都騎Ubike從捷運站到德田館</li><li>Euclidea又被翻回來玩，真的有趣</li><li>一個有點心的營隊值得給讚</li><li>開一個好的judge感覺好難，沒事就會爆炸XDD</li><li>好多人從IOIC得到感冒或流感，怕</li><li>大家都喜歡隨機，哪那麼衰</li><li>大家都同意塗大為超帥</li><li>軟軟超夯，果然可愛就是正義，每次放到桌上的軟軟都會不見qq</li><li>看到好多只有聽過的人的面孔(?)</li><li>跟國手聊天應該是最大的收穫之一，還聽到有些神奇的演算法</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> experience </tag>
            
            <tag> IOIC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1168</title>
      <link href="/2020/01/25/TIOJ-1168/"/>
      <url>/2020/01/25/TIOJ-1168/</url>
      
        <content type="html"><![CDATA[<h1 id="進階的入門"><a href="#進階的入門" class="headerlink" title="進階的入門"></a>進階的入門</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1168" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1168</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>你需要實作五個函式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_big</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_small</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">big</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">small</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>其中第一個函式需要將最大的數字移除，第二個函式需要將最小的數字移除，第三個函式需要將一個數加入目前的數字們，第四個函式需要回傳當前的最大值，第五個函式需要回傳當前的最小值。<br>假設一開始沒有任何數字，請你實作這五個操作。</p><p>保證當沒有數字的時候只會呼叫 <code>push</code> ，並且加入的數字 $\leq 10^9$ ，五個函數的總呼叫次數 $\leq 10^6$ 。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>好久之前就一直卡這題總算AC了@_@</p><p>最直覺的想法就是開一個multiset或map，但這題的時限超誇張的緊<br>可以想到利用 <code>priority_queue</code> 維護最大最小<br>然而假如一個數字在最大堆被pop掉，不容易在最小堆裡面把他給刪除</p><p>我一開始的想法是開 <code>unordered_map</code> 之類的紀錄每個數字的個數，想當然而吃了TLE<br>後來查了解才發現紀錄插入編號並且維護編號幾的被 <code>pop</code> 了就可以<br>於是我就在 <code>priority_queue</code> 裡面存編號，並且自己寫compare函式<br>不過這樣寫的locality很差，似乎會讓常數暴增</p><p>改成用struct包住之後剩下最後兩筆TLE，試了好久之後才想到 <code>priority_queue</code> 是用 <code>vector</code> 實作，動態開的空間顯然會浪費很多常數，不如自己靜態開一個大陣列<br>注意到 <code>pop</code> 操作最多就是呼叫次數的一半，所以 <code>heap</code> 只要開 5e5 就好了， <code>push</code> 的時候多出去的可以直接丟掉<br>至於 <code>popped</code> 陣列應該還是要開到 1e6 ，因為被 <code>pop</code> 的東西有可能編號很大，TIOJ上的測資似乎沒考慮到這個地方所以開 5e5 也能AC</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1168.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> val&lt;b.val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span> &#123;</span></span><br><span class="line">    node v[N];</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(node x)</span> </span>&#123;</span><br><span class="line">        v[sz++] = x;</span><br><span class="line">        <span class="built_in">std</span>::push_heap(v,v+sz);</span><br><span class="line">        <span class="keyword">if</span>(sz &gt;= N) sz = N<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">top</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> v[<span class="number">0</span>];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::pop_heap(v,v+sz);</span><br><span class="line">        --sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; mx, mn;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">bool</span> popped[N]; <span class="comment">// should be N*2?</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    mx.push(&#123;x, tot&#125;);</span><br><span class="line">    mn.push(&#123;-x, tot&#125;);</span><br><span class="line">    ++tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">big</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(popped[mx.top().id]) mx.pop();</span><br><span class="line">    <span class="keyword">return</span> mx.top().val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">small</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(popped[mn.top().id]) mn.pop();</span><br><span class="line">    <span class="keyword">return</span> -mn.top().val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_big</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(popped[mx.top().id]) mx.pop();</span><br><span class="line">    popped[mx.top().id] = <span class="number">1</span>;</span><br><span class="line">    mx.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop_small</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(popped[mn.top().id]) mn.pop();</span><br><span class="line">    popped[mn.top().id] = <span class="number">1</span>;</span><br><span class="line">    mn.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1094</title>
      <link href="/2020/01/24/TIOJ-1094/"/>
      <url>/2020/01/24/TIOJ-1094/</url>
      
        <content type="html"><![CDATA[<h1 id="C-幼稚國王的獎賞"><a href="#C-幼稚國王的獎賞" class="headerlink" title="C.幼稚國王的獎賞"></a>C.幼稚國王的獎賞</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1094" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1094</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>定義一個非負整數集合的價值是裡面所有數字XOR起來<br>給定一些非負整數，問你能選出價值最高的子集價值是多少？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>經典題 maximum subset xor</p><h3 id="線性基"><a href="#線性基" class="headerlink" title="線性基"></a>線性基</h3><p>首先可以把每個數字的二進位看成模2的$k$維向量</p><h4 id="span"><a href="#span" class="headerlink" title="span"></a>span</h4><p>我們說一群向量$S = \{\textbf{v}_ 1, \textbf{v}_ 2, \dots, \textbf{v}_ n\}$的線性生成空間是</p><script type="math/tex; mode=display">\textrm{span}(S) = \{ \sum_{i=1}^n\lambda_i \textbf{v}_ i \}</script><p>也就是說$\textrm{span}(S)$代表的是所有$S$內的元素的有限線性組合</p><h4 id="linear-independent"><a href="#linear-independent" class="headerlink" title="linear independent"></a>linear independent</h4><p>對於一組向量$\{\textbf{v}_ 1, \textbf{v}_ 2, \dots, \textbf{v}_ n\}$<br>若存在不全為$0$的$\lambda_1, \lambda_2, \dots, \lambda_n$使得</p><script type="math/tex; mode=display">\sum_{i=1}^n\lambda_ i \textbf{v}_ i = \textbf{0}</script><p>則我們說這群向量是線性相關的；反之則稱為線性獨立(linear independent)</p><p>一組線性相關的向量至少有一個向量可以用其他向量表示<br>說明: 不失一般性設$\lambda_1 \neq 0$，則</p><script type="math/tex; mode=display">\textbf{v}_ 1 = \sum_ {i=2}^n \frac{-\lambda_i}{\lambda_1} \textbf{v}_i</script><h4 id="basis"><a href="#basis" class="headerlink" title="basis"></a>basis</h4><p>一組向量$B=\{\textbf{e}_ 1, \textbf{e}_ 2, \dots, \textbf{e}_ n\}$是一個向量空間$V$的基底(basis)若且唯若$\textrm{span}(B) = V$且$B$是一組線性獨立的向量</p><p>由定義可以直接推出，$V$中的所有向量$\textbf{v}$都可以唯一表示為$B$裡面的向量的線性組合，因為</p><script type="math/tex; mode=display">\textbf{v} = \sum \lambda_i \textbf{e}_ i = \sum \lambda_i' \textbf{e}_ i \Leftrightarrow \sum (\lambda_i - \lambda_i') \textbf{e}_ i = \textbf{0} \Leftrightarrow \forall i, \lambda_i = \lambda_i'</script><h4 id="高斯消去"><a href="#高斯消去" class="headerlink" title="高斯消去"></a>高斯消去</h4><p>講了那麼多廢話，這題到底要怎麼做呢？<br>設給定的數字集合是$V$，可以發現我們要求的就是$S = \textrm{span}(V)$中的最大值，透過維護$S$的基底集合$B$，我們能夠快速得知是否能夠湊出一個第k位是1的XOR值</p><p>當我們考慮到第k位的時候，我們至多只需要保存一個最高位是第k位的基底，因為假設有兩個基$x,y$其第k位都是1，則可以用$x \oplus y$來代替$x$</p><p>嘗試加入一個數字$x$到基底時，我們從$x$的最高位k開始看<br>假設已經有一個基底$e$的最高位是第k位，我們就可以把$x$替換成$x \oplus e$，如果此時$x$變為0代表$x$已經可以用前面的一些基底湊出來了，加入$x$會破壞線性獨立的特性；<br>反之，若沒有一個基底$e$的最高位是第k位，那我們就直接加入$x$作為提供第k位的1的人</p><p>那麼最後我們要怎麼取最大值呢？同樣從最高位開始看<br>如果目前看到第k位，並且答案的第k位是0<br>若又剛好存在一個最高位是第k位的基底$e$的話，我們取$e$肯定不會虧嘛<br>因為$e$是我們維護唯一一個最高位是第k位的基底，之後不會再考慮到第k位以上的東西了</p><p>如果上面的東東聽不懂的話就努力看code參透吧QQ</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,v;</span><br><span class="line"><span class="keyword">int</span> bas[K];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = K<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span>(x &amp; (<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(bas[i]) x ^= bas[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            bas[i] = x;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = K<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>((res ^ bas[i]) &amp; (<span class="number">1</span>&lt;&lt;i)) res ^= bas[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) bas[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">            ins(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; getmax() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1408</title>
      <link href="/2020/01/14/TIOJ-1408/"/>
      <url>/2020/01/14/TIOJ-1408/</url>
      
        <content type="html"><![CDATA[<h1 id="我很忙"><a href="#我很忙" class="headerlink" title="我很忙"></a>我很忙</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1408" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1408</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定$n$個時段$[l_i, r_i)$<br>問至少有多少單位時間要是忙碌的才能滿足<br>「每個時段中都有至少$c_i$單位時間是忙碌的」(每單位時間都不是忙碌就是空閒)</p><p>註: 題目保證有解</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><del>看到這種很多區間的題目，就會很想把它們照右界從小到大排序</del></p><p>可以想到一個greedy策略<br>按右界遞增排序好之後，遇到一個時段就看是否已經滿足條件<br>如果已經滿足了就跳過<br>如果還沒有的話就必須選一些時間由空閒變為忙碌，而這些時間依照貪心的原則是從越右邊開始選越好<br>(選左邊的不會對之後右界更大的時段有比較多幫助)</p><p>檢查是否滿足條件只要維護區間和<br>於是我的作法是用一棵線段樹配上一個 <code>stack</code><br>每次新插入一個時段，先以線段樹查詢這個區間內忙碌的時間總共是多少<br>接著對於剩下需要再增加的時間，維持 <code>stack</code> 內是不相交且排序好的一些時段，代表那些時間必須要是忙碌的<br>只要看目前最右邊的忙碌時段就能處理好</p><p>這份AC code中我沒有值域壓縮(因為我懶)<br>一臉在CF上欠hack</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v, x, sizeof(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100025</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[N&lt;&lt;<span class="number">1</span>],tag[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> d, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    sum[p] += d * (<span class="number">1</span>&lt;&lt;h);</span><br><span class="line">    <span class="keyword">if</span>(p &lt; N) tag[p] += d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = __lg(N); h &gt;= <span class="number">0</span>; h--) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = p&gt;&gt;h;</span><br><span class="line">        <span class="keyword">if</span>(!tag[i&gt;&gt;<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        upd(i, tag[i&gt;&gt;<span class="number">1</span>], h);</span><br><span class="line">        upd(i^<span class="number">1</span>, tag[i&gt;&gt;<span class="number">1</span>], h);</span><br><span class="line">        tag[i&gt;&gt;<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = <span class="number">0</span>; p &gt; <span class="number">1</span>; h++, p&gt;&gt;=<span class="number">1</span>) sum[p&gt;&gt;<span class="number">1</span>] = sum[p]+sum[p^<span class="number">1</span>] + tag[p&gt;&gt;<span class="number">1</span>] * (<span class="number">2</span>&lt;&lt;h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = l, R = r, h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(l+=N, r+=N; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>, h++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) upd(l++, d, h);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) upd(--r, d, h);</span><br><span class="line">    &#125;</span><br><span class="line">    pull(L+N), pull(R<span class="number">-1</span>+N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    push(l+N), push(r<span class="number">-1</span>+N);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(l+=N, r+=N; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res += sum[l++];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res += sum[--r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; stk;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    c -= query(l, r);</span><br><span class="line">    <span class="keyword">if</span>(c &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> now = r;</span><br><span class="line">    <span class="keyword">while</span>(stk.size() &amp;&amp; now - stk.back().ss &lt;= c) &#123;</span><br><span class="line">        c -= now - stk.back().ss;</span><br><span class="line">        now = stk.back().ff;</span><br><span class="line">        modify(stk.back().ff, stk.back().ss, <span class="number">-1</span>);</span><br><span class="line">        stk.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">    stk.pb(now-c, r);</span><br><span class="line">    modify(now-c, r, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//for(auto s: stk) cout &lt;&lt; '[' &lt;&lt; s.ff &lt;&lt; ',' &lt;&lt; s.ss-1 &lt;&lt; ']' &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, c;</span><br><span class="line">&#125; v[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; v[i].l &gt;&gt; v[i].r &gt;&gt; v[i].c;</span><br><span class="line">        sort(v,v+n, [](seg &amp;a, seg &amp;b)&#123;<span class="keyword">return</span> a.r&lt;b.r;&#125;);</span><br><span class="line">        stk.clear();</span><br><span class="line">        mem(sum, <span class="number">0</span>), mem(tag, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ins(v[i].l, v[i].r, v[i].c);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> s: stk) sum += s.ss - s.ff;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1152</title>
      <link href="/2020/01/12/TIOJ-1152/"/>
      <url>/2020/01/12/TIOJ-1152/</url>
      
        <content type="html"><![CDATA[<h1 id="1-銀河帝國旅行社"><a href="#1-銀河帝國旅行社" class="headerlink" title="1.銀河帝國旅行社"></a>1.銀河帝國旅行社</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1152" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1152</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給一棵樹，找最遠的兩個點的距離</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這裡用類似DP的方法<br><code>dfs(i)</code> 回傳一個 <code>{ans, deepest}</code> 分別表示以$i$為根子樹中的答案和從$i$往下走的最遠距離<br>那<code>ans</code>可以分成有經過$i$的和沒經過的，有經過的就看最深的兩個子樹加起來是多少，沒經過的就遞迴下去算</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dfs(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j: g[i]) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = dfs(j);</span><br><span class="line">        ans = max(ans, p.ff);</span><br><span class="line">        tmp.pb(p.ss+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(tmp), greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">if</span>(tmp.size() &gt;= <span class="number">2</span>) ans = max(ans, tmp[<span class="number">0</span>]+tmp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> &#123;ans, tmp[<span class="number">0</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; x &amp;&amp; ~x) g[i].pb(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs(<span class="number">0</span>).ff &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bamboofox-ctf</title>
      <link href="/2020/01/02/bamboofox-ctf/"/>
      <url>/2020/01/02/bamboofox-ctf/</url>
      
        <content type="html"><![CDATA[<p>這次打跨年CTF應該是我第一次打一個正常的CTF吧（？）<br>感覺好多有趣的題目www<br><a href="https://ctf.bamboofox.cs.nctu.edu.tw/" target="_blank" rel="noopener">https://ctf.bamboofox.cs.nctu.edu.tw/</a></p><h1 id="Solved-Problems"><a href="#Solved-Problems" class="headerlink" title="Solved Problems"></a>Solved Problems</h1><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>Joy說看題目給的影片就有flag了</p><h2 id="Web-newbie"><a href="#Web-newbie" class="headerlink" title="Web newbie"></a>Web newbie</h2><p>被作業解掉，好像往source code的註解裡面找就對了</p><h2 id="Land-1"><a href="#Land-1" class="headerlink" title="Land-1"></a>Land-1</h2><p>良心題<br>直接copy全國模擬賽的code，送我們這些有打的人免費分數<br>Land-2碰了好久一直CE，QQ</p><h2 id="I-can’t-see-you"><a href="#I-can’t-see-you" class="headerlink" title="I can’t see you"></a>I can’t see you</h2><p>給了一個 <code>what.rar</code> ，Joy說不知道密碼不過丟到網路上某個工具就解開了XD(密碼是blind，聽說有人直接猜出來)<br>之後會看到一張白底有黑點的圖片，對照盲人點字可以拿到flag</p><h2 id="How2decompyle"><a href="#How2decompyle" class="headerlink" title="How2decompyle"></a>How2decompyle</h2><p>題目給了一個沒有副檔名的檔案<br>因為題目名稱裡面有py，嘗試把他丟到google找到的decompyler之類的東西?<br>不過因為沒有副檔名他不吃，他只吃.py和.pyc(這時我們才知道我們大概拿到.pyc，是byte code XDD)<br>於是改副檔名再丟一樣的地方就得到原始的.py檔了<br>讀一下發現怎麼讓他跑出flag之後跑一跑就AC了(?)</p><h2 id="Happy-New-Year"><a href="#Happy-New-Year" class="headerlink" title="Happy New Year"></a>Happy New Year</h2><p>賽中新增的題目，直接給flag ww</p><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><p>作業丟給我的(?)<br>解壓縮他給的檔案之後發現看起來很欠DFS，確定葉節點是檔案可以直接讀之後就想寫個DFS<br>不過shell的遞迴我不會，想說用python，不過還是要查套件:(，爛死<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> chdir</span><br><span class="line"><span class="keyword">from</span> glob <span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(s)</span>:</span></span><br><span class="line">s = s[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#print('s = ', s)</span></span><br><span class="line">typ = s[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#print(typ)</span></span><br><span class="line"><span class="keyword">if</span> typ == <span class="string">'+'</span>:</span><br><span class="line"><span class="keyword">return</span> dfs(glob(s+<span class="string">"/0_*"</span>)) + dfs(glob(s+<span class="string">"/1_*"</span>))</span><br><span class="line"><span class="keyword">if</span> typ == <span class="string">'x'</span>:</span><br><span class="line"><span class="keyword">return</span> dfs(glob(s+<span class="string">"/0_*"</span>)) * dfs(glob(s+<span class="string">"/1_*"</span>))</span><br><span class="line"><span class="keyword">if</span> typ == <span class="string">'r'</span>:</span><br><span class="line"><span class="comment">#print('path = ', s)</span></span><br><span class="line"><span class="keyword">return</span> int(open(s).read())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">37</span>):</span><br><span class="line">chdir(<span class="string">"flag["</span>+str(i)+<span class="string">"]/"</span>)</span><br><span class="line">print(chr(dfs(glob(<span class="string">"0_*"</span>))), end = <span class="string">''</span>)</span><br><span class="line">chdir(<span class="string">".."</span>)</span><br></pre></td></tr></table></figure></p><h2 id="AlphaGO"><a href="#AlphaGO" class="headerlink" title="AlphaGO"></a>AlphaGO</h2><p>題目給了一張圖片，是一張棋盤，上面有一些位置有不同字元<br>還有一個奇怪的Hint，不過看不懂<br>和Joy討論之後我丟出是不是「依照AlphaGo某場比賽下子順序看棋盤上的字元」的想法<br>Joy就把他給AC了XD，通靈死</p><h2 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h2><p>蠻早看這題的，不過靠自己真的想不出來QQ<br>他有給server.py，所以我們知道他server跑的東西是RSA<br>可以做兩件詢問: 問flag加密後的東西和n、問一個密文C解密之後的明文mod 3的餘數<br>並且每次連線的n都會是固定的</p><p>解法蠻數學的，參考<br><a href="https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_chosen_plain_cipher-zh/#rsa-byte-oracle" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_chosen_plain_cipher-zh/#rsa-byte-oracle</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"></span><br><span class="line">host = <span class="string">"34.82.101.212"</span></span><br><span class="line">port = <span class="number">20001</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(<span class="string">'connect success'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ask</span><span class="params">(C)</span>:</span></span><br><span class="line">s.send(bytes(<span class="string">'2\n'</span>,<span class="string">'utf-8'</span>))</span><br><span class="line">_ = s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(bytes(<span class="string">f'<span class="subst">&#123;C&#125;</span>\n'</span>,<span class="string">'utf-8'</span>))</span><br><span class="line">raw = s.recv(<span class="number">1024</span>).split()</span><br><span class="line"><span class="comment">#print(raw)</span></span><br><span class="line"><span class="keyword">return</span> int(raw[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'main start'</span>)</span><br><span class="line">_ = s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(bytes(<span class="string">'1\n'</span>,<span class="string">'utf-8'</span>))</span><br><span class="line">raw = s.recv(<span class="number">1024</span>).split()</span><br><span class="line">C = int(raw[<span class="number">2</span>]); N = int(raw[<span class="number">5</span>])</span><br><span class="line"><span class="comment">#exit()</span></span><br><span class="line"></span><br><span class="line">mp = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">mp[-N * i % <span class="number">3</span>] = i</span><br><span class="line">ciph3 = pow(<span class="number">3</span>, <span class="number">65537</span>, N)</span><br><span class="line"></span><br><span class="line">L = Fraction(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">R = Fraction(N, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> R-L &gt; <span class="number">0.01</span>:</span><br><span class="line">C = C * ciph3 % N</span><br><span class="line">K = mp[ask(C)]</span><br><span class="line">I = (R-L)/<span class="number">3</span></span><br><span class="line">L = L + I*K</span><br><span class="line">R = L + I</span><br><span class="line">print(L, R)</span><br><span class="line">print(round(L))</span><br><span class="line">print(round(R))</span><br><span class="line"><span class="comment"># L,R is plain text</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><br>這樣就可以得到一個整數<br>6345976407505107785691848974596122250401442742754095997<br>然後這邊有三個蠢錯誤</p><ol><li>不會用python的os套件，而且忽略了UX的輸出</li><li>一開始用浮點數搜尋，搜出來好幾次都不一樣XDD(而且每次都超久，要詢問近700次左右)，後來發現大家都寫分數就直接用分數了…天真的以為python的浮點數能處理300多位</li><li>本來丟到網路上轉hex的東西是爛的QQ，用python才得到<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; hex(<span class="number">6345976407505107785691848974596122250401442742754095997</span>) =</span><br><span class="line"><span class="string">'0x42414d424f4f464f587b53696d506c45305241436c337d'</span></span><br></pre></td></tr></table></figure>然後就很明顯是兩個一組的ascii了，丟到網路上轉ascii的東西得到flag</li></ol><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>好多用google的題目(X<br>而且也好多部分應該要是先備知識的我也一直google XDD<br>不過有解出題目感覺好有成就感（？）<br>最後三個人的成績是27名&gt;w&lt;開心</p>]]></content>
      
      
      
        <tags>
            
            <tag> experience </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2037</title>
      <link href="/2019/12/31/TIOJ-2037/"/>
      <url>/2019/12/31/TIOJ-2037/</url>
      
        <content type="html"><![CDATA[<h1 id="警力配置"><a href="#警力配置" class="headerlink" title="警力配置"></a>警力配置</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/2037" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2037</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>裸的二分圖匹配</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這邊給匈牙利算法<br>有一個subtask是給一個點數很多的樹<br>特判用dp即可</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) begin(v),end(v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(v) (ll(v.size()))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_pos(v,x) (lower_bound(all(v),x)-begin(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sort_uni(v) sort(begin(v),end(v)),v.erase(unique(begin(v),end(v)),end(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v,x,sizeof v)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; pld;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> max_heap = __gnu_pbds::priority_queue&lt;T,less&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> min_heap = __gnu_pbds::priority_queue&lt;T,greater&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">constexpr</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">2025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">998244353</span>, K = <span class="number">11</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">cdiv</span><span class="params">(ll x, ll m)</span> </span>&#123; <span class="keyword">return</span> (x+m<span class="number">-1</span>)/m; &#125; <span class="comment">// ceiling divide, x/m for flooring divide</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BipartiteMatching</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">    <span class="keyword">int</span> mx[N],my[N],vis[N],now,n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        G[x].pb(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[x] == now) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        vis[x] = now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y:G[x]) <span class="keyword">if</span>(my[y]==<span class="number">-1</span> || dfs(my[y])) <span class="keyword">return</span> my[mx[x]=y]=x, <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) vis[i] = <span class="number">0</span>, mx[i] = <span class="number">-1</span>, my[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(mx[i] == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> j:G[i]) <span class="keyword">if</span>(my[j]==<span class="number">-1</span>) &#123;</span><br><span class="line">            my[mx[i]=j]=i;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(now = <span class="number">1</span>; now &lt;= n; now++) <span class="keyword">if</span>(mx[now] == <span class="number">-1</span> &amp;&amp; dfs(now)) ans++;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sv;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> p,q,m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; q &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span>(max(p,q) &lt; N) &#123;</span><br><span class="line">            sv.init(max(p,q));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> a,b;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">                sv.addEdge(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; sv.solve() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; tr(p+q+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">array</span>&lt;<span class="keyword">int</span>,2&gt;&gt; dp(p+q+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//assert(m == p+q-1);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> a,b;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">                tr[a].pb(b+p);</span><br><span class="line">                tr[b+p].pb(a);</span><br><span class="line">            &#125;</span><br><span class="line">            function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> p) &#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = (p != <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j:tr[i]) <span class="keyword">if</span>(j!=p) &#123;</span><br><span class="line">                    dfs(j,i);</span><br><span class="line">                    dp[i][<span class="number">1</span>] += dp[j][<span class="number">0</span>];</span><br><span class="line">                    dp[i][<span class="number">0</span>] += dp[j][<span class="number">0</span>];</span><br><span class="line">                    mx = max(mx, dp[j][<span class="number">1</span>] - dp[j][<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i][<span class="number">0</span>] += mx;</span><br><span class="line">            &#125;;</span><br><span class="line">            dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; max(dp[<span class="number">1</span>][<span class="number">0</span>],dp[<span class="number">1</span>][<span class="number">1</span>]) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1441</title>
      <link href="/2019/12/31/TIOJ-1441/"/>
      <url>/2019/12/31/TIOJ-1441/</url>
      
        <content type="html"><![CDATA[<h1 id="萬里長城"><a href="#萬里長城" class="headerlink" title="萬里長城"></a>萬里長城</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1441" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1441</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定一個序列，找出最長的「長城」子序列<br>一個序列$&lt; a_1,a_2,\dots,a_n &gt;$必須符合下列幾點才算是「長城」</p><ol><li>n是奇數</li><li>若$i$是偶數，則$a_i$必須小於相鄰的項</li><li>若$i$是奇數，則$a_i$必須大於相鄰的項</li></ol><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>貪心法<br>維護一個tail表示前$i$項滿足點2. 3.的最佳解，其結尾是多少<br>假設下一個項h必須比tail大<br>若h比tail大，那就直接接上去(並更新tail)，否則就把tail替換成h<br>反之亦然</p><p>證明大概可以用數歸吧(?)我也不太會說明QQ</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n, tail = <span class="number">-1</span>, inc = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">        <span class="keyword">if</span>(h == tail) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(h &lt; tail ^ inc) ++ans, inc = !inc;</span><br><span class="line">        tail = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inc) --ans;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modulo-Arithmetic</title>
      <link href="/2019/12/30/Modulo-Arithmetic/"/>
      <url>/2019/12/30/Modulo-Arithmetic/</url>
      
        <content type="html"><![CDATA[<h1 id="同餘算數"><a href="#同餘算數" class="headerlink" title="同餘算數"></a>同餘算數</h1><h2 id="定義"><a href="#定義" class="headerlink" title="定義"></a>定義</h2><script type="math/tex; mode=display">m | (a-b) \Leftrightarrow a \equiv b \pmod m</script><p>或者說$a,b$同餘於$m$</p><h2 id="基本性質"><a href="#基本性質" class="headerlink" title="基本性質"></a>基本性質</h2><p>當一個題目要求答案模一個數字$m$時<br>通常我們都可以不用先算出一個很大的答案再取模<br>利用下面的規則能夠在計算的過程中一邊取模(加減乘不會改變等價關係)<br>設</p><script type="math/tex; mode=display">\left \{\begin{matrix}a_0 \equiv a_1 \pmod m \\b_0 \equiv b_1 \pmod m \end{matrix}\right .</script><p>則易得到</p><script type="math/tex; mode=display">\left \{\begin{matrix}a_0 \pm b_0 \equiv a_1 \pm b_1 \pmod m \\a_0b_0 \equiv a_1b_1 \pmod m\end{matrix}\right .</script><h2 id="模逆元"><a href="#模逆元" class="headerlink" title="模逆元"></a>模逆元</h2><p>在一般實數的除法時，如果我們想知道除以$a$的結果，可以看成乘上倒數$1/a$<br>也就是說找一個$x$使得$ax = 1$<br>而在模$m$的情況下，我們同樣也可以用一個使得$ax \equiv 1$的$x$來代替除以$a$的運算，稱為模逆元<br>(如果常常打CF的話應該常常看見上面模逆元的敘述)<br>求取模逆元$x = a^{-1}$只要把同餘關係改寫成$ax = my+1$就可以用擴展歐幾里得求解了<br>注意$a,m$必須互質才會有模逆元</p><p>例: 如果要求</p><script type="math/tex; mode=display">\frac{a}{b} + \frac{c}{d} = \frac{ad+bc}{bd}</script><p>由於</p><script type="math/tex; mode=display">(ab^{-1} + cd^{-1}) \cdot bd \equiv ad+bc \pmod m</script><p>也就是說$ab^{-1} + cd^{-1}$是和$\frac{ad+bc}{bd}$等價的東西</p><h2 id="冪次們"><a href="#冪次們" class="headerlink" title="冪次們"></a>冪次們</h2><p>從$a \equiv b \pmod m$不可推出$k^a \equiv k^b \pmod m$！<br>不過依照歐拉定理可以化簡冪次上的東西</p><p>由歐拉定理</p><script type="math/tex; mode=display">(a, n) = 1 \Leftrightarrow a ^ {\varphi(n)} \equiv 1 \pmod n</script><p>可以知道</p><script type="math/tex; mode=display">a \equiv b \pmod {\varphi(n)} \Leftrightarrow k^a \equiv k^b \pmod n</script><p>假如$n$是質數的話還可以用來求模逆元<br>因為對質數$p$來說$\varphi(p) = p-1$，$a^{p-1} \equiv 1 \pmod p$<br>故$a^{-1} \equiv a^{p-2}$(注意0還是沒有模逆元)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1567</title>
      <link href="/2019/12/29/TIOJ-1567/"/>
      <url>/2019/12/29/TIOJ-1567/</url>
      
        <content type="html"><![CDATA[<h1 id="黑色騎士團的飛彈野望"><a href="#黑色騎士團的飛彈野望" class="headerlink" title="黑色騎士團的飛彈野望"></a>黑色騎士團的飛彈野望</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1567" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1567</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定平面上$n$個點，求至少要用幾個圓心在$x$軸上、半徑為$r$的圓才能覆蓋所有點<br>若不可行輸出-1</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先我們對每個點都可以知道包覆它的圓的圓心範圍在$x$軸的哪段區間<br>那題目就轉換成在$x$軸上放一些圓心，使得每個點對應的區間內都至少有一個點被選到<br>此為greedy經典題，按照右界排序後，由小到大檢查若某個區間還沒有放東西就放一個在它的右界</p><p>證明很簡單，右界最小的區間內一定至少要選一個點放<br>假設沒有選右界$r$而選了某個點$i$放，則改選右界，不會有其他右界更大的區間$I$包含$i$卻不包含$r$<br>故選右界最小的區間的右界不會錯過最佳解</p><p>無解的判斷就是只要有一個點和$x$軸距離超過$r$就不可行，否則顯然至多用$n$個圓可以覆蓋所有點</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) begin(v),end(v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(v) (ll(v.size()))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_pos(v,x) (lower_bound(all(v),x)-begin(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sort_uni(v) sort(begin(v),end(v)),v.erase(unique(begin(v),end(v)),end(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v,x,sizeof v)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; pld;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> max_heap = __gnu_pbds::priority_queue&lt;T,less&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> min_heap = __gnu_pbds::priority_queue&lt;T,greater&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">constexpr</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">1000025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">998244353</span>, K = <span class="number">256</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">cdiv</span><span class="params">(ll x, ll m)</span> </span>&#123; <span class="keyword">return</span> x/m + (x&lt;<span class="number">0</span> ^ m&gt;<span class="number">0</span>) &amp;&amp; (x%m); &#125; <span class="comment">// ceiling divide</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(e%=m;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"></span><br><span class="line">ll n,r,x,y,ans;</span><br><span class="line">pld seg[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(y) &gt; r) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>, <span class="number">0</span>;</span><br><span class="line">        ld d = <span class="built_in">sqrt</span>(r*r-y*y);</span><br><span class="line">        seg[i] = &#123;x+d, x-d&#125;; <span class="comment">// &#123;r, l&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(seg, seg+n);</span><br><span class="line">    ld last = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(seg[i].ss &gt; last) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        last = seg[i].ff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFT-NTT</title>
      <link href="/2019/12/25/FFT-NTT/"/>
      <url>/2019/12/25/FFT-NTT/</url>
      
        <content type="html"><![CDATA[<h1 id="捲積方法-OAO"><a href="#捲積方法-OAO" class="headerlink" title="捲積方法 OAO"></a>捲積方法 OAO</h1><p>本篇的重點應該是放在理解與使用與競程相關的捲積，其中會利用到FFT或NTT加速<br>這邊先定義一下捲積$ * $是什麼</p><script type="math/tex; mode=display">(a * b)_ x = \sum_{i+j=x} a_i b_j</script><p>實際上就等價於我們常見的多項式乘法<br>naive的做法是$\mathcal{O}(n^2)$，顯然不夠令人滿意<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B.size(); j++) &#123;</span><br><span class="line">res[i+j] += A[i] * B[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="DFT"><a href="#DFT" class="headerlink" title="DFT"></a>DFT</h2><p>先假設我們有兩個多項式</p><script type="math/tex; mode=display">A(x) = \sum a_i x^i, B(x) = \sum b_i x^i \\C(x) = A(x)B(x)</script><p>除了上述利用分配律乘開以外<br>因為$C$的次數已經可以確定<br>我們也可以在$A(x)$和$B(x)$找出$n$個相異的點，相乘之後再利用插值法代入得到$C$<br>其中$n = \deg C + 1$<br>也就是</p><script type="math/tex; mode=display">\begin{bmatrix}1 & x_0 & x_0^2 & \cdots & x_0^{n-1} \\1 & x_1 & x_1^2 & \cdots & x_1^{n-1} \\\vdots & \vdots & \vdots & \ddots & \vdots \\1 & x_{n-1} & x_{n-1}^2 & \cdots & x_{n-1}^{n-1}\end{bmatrix}\begin{bmatrix}a_0 \\ a_1 \\ \vdots \\ a_{n-1}\end{bmatrix}=\begin{bmatrix}A(x_0) \\ A(x_1) \\ \vdots \\ A(x_{n-1})\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}1 & x_0 & x_0^2 & \cdots & x_0^{n-1} \\1 & x_1 & x_1^2 & \cdots & x_1^{n-1} \\\vdots & \vdots & \vdots & \ddots & \vdots \\1 & x_{n-1} & x_{n-1}^2 & \cdots & x_{n-1}^{n-1}\end{bmatrix}\begin{bmatrix}b_0 \\ b_1 \\ \vdots \\ b_{n-1}\end{bmatrix}=\begin{bmatrix}B(x_0) \\ B(x_1) \\ \vdots \\ B(x_{n-1})\end{bmatrix}</script><script type="math/tex; mode=display">\begin{bmatrix}1 & x_0 & x_0^2 & \cdots & x_0^{n-1} \\1 & x_1 & x_1^2 & \cdots & x_1^{n-1} \\\vdots & \vdots & \vdots & \ddots & \vdots \\1 & x_{n-1} & x_{n-1}^2 & \cdots & x_{n-1}^{n-1}\end{bmatrix}^{-1}\begin{bmatrix}A(x_0)B(x_0) \\ A(x_1)B(x_1) \\ \vdots \\ A(x_{n-1})B(x_{n-1})\end{bmatrix}=\begin{bmatrix}c_0 \\ c_1 \\ \vdots \\ c_{n-1}\end{bmatrix}</script><p>最後一步直接高斯消去或用拉格朗日/牛頓插值法可以做到$\mathcal{O}(n^2)$</p><p>上述步驟稱為DFT(對序列的版本叫離散傅立葉變換，與使用積分的連續傅立葉變換相對)和IDFT<br>但是這樣根本沒有改進多少複雜度啊？<br>邁向快速傅立葉變換的鑰匙是利用複數，取特定的某些$x$讓我們能夠分治</p><h2 id="Root-of-Unity"><a href="#Root-of-Unity" class="headerlink" title="Root of Unity"></a>Root of Unity</h2><p>首先先來介紹單位根$\omega$是使得</p><script type="math/tex; mode=display">\omega ^ n = 1 \\\forall 0 \leq i < j < n, \omega^i \neq \omega^j</script><p>的數</p><p>複習一下歐拉公式<script type="math/tex">e^{ix} = \cos x + i\sin x</script><br>習慣上可以取$\omega_n = e^{-\frac{2\pi i}{n}}$(下標是表示$n$是最小的$i$使$\omega^i = 1$，或者說$\operatorname{ord}(\omega_n) = n$)</p><p><img src="/images/FFT-NTT/root_of_unity.png" alt="404的啦QQ"></p><p>推薦觀賞3B1B系列<br><a href="https://youtu.be/v0YEaeIClKY" target="_blank" rel="noopener">https://youtu.be/v0YEaeIClKY</a><br><a href="https://youtu.be/mvmuCPvRoWQ" target="_blank" rel="noopener">https://youtu.be/mvmuCPvRoWQ</a></p><h2 id="引理們"><a href="#引理們" class="headerlink" title="引理們"></a>引理們</h2><h3 id="Lemma-a"><a href="#Lemma-a" class="headerlink" title="Lemma a."></a>Lemma a.</h3><script type="math/tex; mode=display">\omega_{dn}^{dk} = (e^{\frac{2\pi i}{dn}})^{dk} = (e^{\frac{2\pi i}{n}})^k = \omega_n^k</script><h3 id="Lemma-b"><a href="#Lemma-b" class="headerlink" title="Lemma b."></a>Lemma b.</h3><script type="math/tex; mode=display">\omega_n^{\frac{n}{2}} = \omega_2 = e^{i\pi} = -1</script><h2 id="Cooley-Turkey-FFT-algorithm"><a href="#Cooley-Turkey-FFT-algorithm" class="headerlink" title="Cooley-Turkey FFT algorithm"></a>Cooley-Turkey FFT algorithm</h2><p>先假設$n$是2的冪次，然後下面提到的$i$都只是index<br>將DFT中的$x_i$取值為$\omega_n^i$，可以知道我們要算的就是對$i \in [0, n-1]$求</p><script type="math/tex; mode=display">y_i = \sum_{j=0}^{n-1} a_j (\omega_n^i)^j</script><p>把右式的奇數項和偶數項分開處理(這邊是原理的精華)</p><script type="math/tex; mode=display">\begin{align}y_i = \sum_{j=0}^{n-1} a_j (\omega_n^i)^j&= \sum_{j=0}^{\frac{n}{2}-1} a_{2j} (\omega_n^i)^{2j} + \sum_{j=0}^{\frac{n}{2}-1} a_{2j+1} (\omega_n^i)^{2j+1} \\&= \sum_{j=0}^{\frac{n}{2}-1} a_{2j} (\omega_{\frac{n}{2}}^i)^j + \omega_n^i \sum_{j=0}^{\frac{n}{2}-1} a_{2j+1} (\omega_{\frac{n}{2}}^i)^j \\&= F_{even}(i) + \omega_n^i F_{odd}(i)\end{align}</script><p>其中$F_{even}, F_{odd}$分別是以奇數和偶數項FFT得到的東西，可以遞迴求解<br>雖然以$\frac{n}{2}$的長度遞迴只能得到$i \in [0, \frac{n}{2}-1]$的答案<br>不過$F_{even}$和$F_{odd}$都有週期$\frac{n}{2}$，再由Lemma b.可以簡化成</p><script type="math/tex; mode=display">\text{for } 0 \leq i < \frac{n}{2}, \left\{\begin{matrix}y_i &= F_{even}(i) + \omega_n^i F_{odd}(i)\\ y_{i+\frac{n}{2}} &= F_{even}(i) - \omega_n^i F_{odd}(i)\\ \end{matrix}\right.</script><p>時間複雜度有$T(n) = 2T(n/2) + \mathcal{O}(n)$，由主定理可知$T(n) = \mathcal{O}(n\log n)$<br>要將FFT一言以概之，大概就是利用分治法將多項式轉換成點值表示吧<br>附上遞迴版的參考程式碼，雖然迭代版通常效率較好不過遞迴版有助於理解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cd;</span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; FFT(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;cd&gt; &amp;F) &#123; <span class="comment">// assume F.size() == 2^k</span></span><br><span class="line"><span class="keyword">if</span>(F.size() == <span class="number">1</span>) <span class="keyword">return</span> F; <span class="comment">// base case (important)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; rec[<span class="number">2</span>], ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size(); i++) rec[i&amp;<span class="number">1</span>].push_back(F[i]);</span><br><span class="line">rec[<span class="number">0</span>] = FFT(rec[<span class="number">0</span>]);</span><br><span class="line">rec[<span class="number">1</span>] = FFT(rec[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">double</span> theta = <span class="number">-2</span>*PI / F.size();</span><br><span class="line">cd now = <span class="number">1</span>, omega(<span class="built_in">cos</span>(theta), <span class="built_in">sin</span>(theta));</span><br><span class="line">ans.resize(F.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">ans[i] = rec[<span class="number">0</span>] + now * rec[<span class="number">1</span>];</span><br><span class="line">ans[i+F.size()/<span class="number">2</span>] = rec[<span class="number">0</span>] - now * rec[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Inverse-FFT"><a href="#Inverse-FFT" class="headerlink" title="Inverse-FFT"></a>Inverse-FFT</h2><p>那麼要怎麼做IFFT(傅立葉變換的逆變換)，也就是把點值表示轉換回係數呢？<br>FFT可以寫成矩陣的形式，也就是</p><script type="math/tex; mode=display">\begin{bmatrix}1 & 1 & 1 & \cdots & 1 \\1 & \omega & \omega^2 & \cdots & \omega^{n-1} \\\vdots & \vdots & \vdots & \ddots & \vdots \\1 & \omega^{n-1} & (\omega^{n-1})^2 & \cdots & (\omega^{n-1})^{n-1}\end{bmatrix}\begin{bmatrix}c_0 \\ c_1 \\ \vdots \\ c_{n-1}\end{bmatrix}=\begin{bmatrix}C(1) \\ C(\omega) \\ \vdots \\ C(\omega^{n-1})\end{bmatrix}</script><p>左項有一個范德蒙矩陣$V = [\omega^{ij}]$ (0-base)<br>事實上其反矩陣就是$V’ = [\frac{1}{n}\omega^{-ij}]$</p><p>說明:</p><script type="math/tex; mode=display">[V * V']_{i,j} = \sum_{k=0}^{n-1} V_{i,k} V'_ {k,j} = \frac{1}{n}\sum_{k=0}^{n-1} \omega^{k(i-j)}</script><p>$i=j$時顯然為1<br>當$i \neq j$利用等比級數公式可以知道總和為$0$<br>故相乘的結果是單位矩陣</p><p>可以發現我們只需要把FFT的$\omega$改成倒數，最後再除上$n$就是IFFT所需要的<br>因為FFT和IFFT的相似性，我們可以將程式碼整合如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cd;</span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; FFT(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;cd&gt; &amp;F, <span class="keyword">bool</span> inv) &#123; <span class="comment">// assume F.size() == 2^k</span></span><br><span class="line"><span class="keyword">if</span>(F.size() == <span class="number">1</span>) <span class="keyword">return</span> F; <span class="comment">// base case (important)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; rec[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size(); i++) rec[i&amp;<span class="number">1</span>].push_back(F[i]);</span><br><span class="line">rec[<span class="number">0</span>] = FFT(rec[<span class="number">0</span>],inv);</span><br><span class="line">rec[<span class="number">1</span>] = FFT(rec[<span class="number">1</span>],inv);</span><br><span class="line"><span class="keyword">double</span> theta = (inv ? <span class="number">1</span> : <span class="number">-1</span>) * <span class="number">2</span> * PI / F.size();</span><br><span class="line">cd now = <span class="number">1</span>, omega(<span class="built_in">cos</span>(theta), <span class="built_in">sin</span>(theta));</span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; ans(F.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; F.size()/<span class="number">2</span>; i++) &#123;</span><br><span class="line">ans[i] = rec[<span class="number">0</span>][i] + now * rec[<span class="number">1</span>][i];</span><br><span class="line">ans[i+F.size()/<span class="number">2</span>] = rec[<span class="number">0</span>][i] - now * rec[<span class="number">1</span>][i];</span><br><span class="line">now *= omega;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++) ans[i] /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h2><p>有了FFT和IFFT兩個工具，我們要做捲積就很簡單了</p><ol><li>確定兩個多項式相乘的次數，並且選擇一個足夠大的$n = 2^k$(後面可以補0)</li><li>利用Cooley-Turkey演算法求出$A,B$的傅立葉變換$\hat A, \hat B$</li><li>將$\hat A, \hat B$在對應位置兩兩相乘得到$\hat C$(可能叫Hadamard Product吧)</li><li>再利用Cooley-Turkey演算法求出$C$</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;cd&gt; A&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;cd&gt; B&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>&lt;&lt;__lg(A.size()+B.size())+<span class="number">1</span>;</span><br><span class="line">    A.resize(n);</span><br><span class="line">    B.resize(n);</span><br><span class="line">    A = FFT(A,<span class="number">0</span>);</span><br><span class="line">    B = FFT(B,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;cd&gt; C(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) C[i] = A[i]*B[i];</span><br><span class="line">    C = FFT(C,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cout</span> &lt;&lt; C[i].real() &lt;&lt; <span class="string">" \n"</span>[i==n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterative-Version"><a href="#Iterative-Version" class="headerlink" title="Iterative Version"></a>Iterative Version</h2><p>迭代的版本不但簡單執行時間又快，值得記一下</p><p>觀察遞迴的情況<br>可以看到我們每次都是將一個序列的偶數項放前面做，奇數項放後面做再合併<br>這可以想成將最低位的0/1移到最高位，例如</p><script type="math/tex; mode=display">100010\textbf{1} \rightarrow \textbf{1}100010 \\111110\textbf{1} \rightarrow \textbf{1}111110 \\101010\textbf{0} \rightarrow \textbf{0}101010</script><p>重複執行了把最低位移到最高位的動作$k = \log_2{n}$次之後<br>原本放在$i$的位置的數字的index最後會被放到$j$的地方，其中$j$是$i$在$k$位二進位數的反轉<br>也就是說我們可以一開始就把所有數字放到他在遞迴樹中對應的位置，再一層一層往上合併</p><p><img src="/images/FFT-NTT/bit_reverse.png" alt="404的啦QQ"></p><p>那要拿哪些合併呢？其實每個相鄰的兩塊的相同位置對應的就是$F_{even}$和$F_{odd}$，組合算出$y_i$之後要填的地方也是那兩格<br>剩下的就是看code理解了吧…OwO?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; cd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(cd F[], <span class="keyword">int</span> n, <span class="keyword">bool</span> inv)</span> </span>&#123; <span class="comment">// in-place FFT, also assume n = 2^k</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) swap(F[i], F[j]);</span><br><span class="line"><span class="comment">// magic! (maintain j to be the bit reverse of i)</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = n&gt;&gt;<span class="number">1</span>; (j^=k) &lt; k; k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">double</span> theta = (inv ? <span class="number">1</span> : <span class="number">-1</span>) * PI / step;</span><br><span class="line"><span class="function">cd <span class="title">omega</span><span class="params">(<span class="built_in">cos</span>(theta), <span class="built_in">sin</span>(theta))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += step*<span class="number">2</span>) &#123;</span><br><span class="line"><span class="function">cd <span class="title">now</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; step; j++) &#123;</span><br><span class="line">cd a = F[i+j];</span><br><span class="line">cd b = F[i+j+step] * now;</span><br><span class="line">F[i+j] = a+b;</span><br><span class="line">F[i+j+step] = a-b;</span><br><span class="line">now *= omega;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) F[i] /= n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h2><p>注意到我們可以實行分治的關鍵就是存在一個$\omega$使得</p><script type="math/tex; mode=display">\omega ^ n = 1 \\\forall 0 \leq i < j < n, \omega^i \neq \omega^j</script><p>現在我們想要在模一個質數$p$下做類似的事</p><p>費馬小定理表明</p><script type="math/tex; mode=display">\forall (a,p) = 1, a^{\varphi(p)} \equiv 1 \pmod p</script><p>如果有原根$g$使得</p><script type="math/tex; mode=display">\forall 0 \leq i < j < \varphi(p), g^i \not \equiv g^j \pmod p</script><p>那麼$\omega$的選擇就很簡單了，也就是$\omega_n \equiv g ^ {\frac{\varphi(p)}{n}}$<br>容易驗證$\omega_n$滿足上面的性質</p><p>這樣做必須滿足$n | \varphi(p)$，而若使用Cooley-Turkey演算法的話$n$會是2的冪次<br>也就是說若$\varphi(p) = p-1 = t \cdot 2^k$，其中$t$是奇數<br>那對這個$p$來說可行的$n$的範圍最多就是$2^k$了<br>這也是為什麼NTT的模數常常都是那些數字的原因<br>因為$p-1$必須在二進位下有很多個後綴0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> MOD = <span class="number">998244353</span>, G = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int64_t</span> modpow(<span class="keyword">int64_t</span> e, <span class="keyword">int64_t</span> p, <span class="keyword">int64_t</span> m) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p; p&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>) r = r*e%m;</span><br><span class="line">e = e*e%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int64_t</span> F[], <span class="keyword">int</span> n, <span class="keyword">bool</span> inv)</span> </span>&#123; <span class="comment">// assume n = 2^k!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) swap(F[i], F[j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = n&gt;&gt;<span class="number">1</span>; (j^=k) &lt; k; k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//may preprocess to boost</span></span><br><span class="line"><span class="keyword">int64_t</span> omega = modpow(G, (MOD<span class="number">-1</span>) / (step*<span class="number">2</span>), MOD);</span><br><span class="line"><span class="keyword">if</span>(inv) omega = modpow(omega, MOD<span class="number">-2</span>, MOD);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += step*<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; step; j++) &#123;</span><br><span class="line">cd a = F[i+j];</span><br><span class="line">cd b = F[i+j+step] * now % MOD;</span><br><span class="line"><span class="comment">// reduce the use of % operator</span></span><br><span class="line">F[i+j] = (a+b &lt; MOD ? a+b : a+b-MOD);</span><br><span class="line">F[i+j+step] = (a-b&lt;<span class="number">0</span> ? a-b+MOD : a-b);</span><br><span class="line">now = now*omega%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> invn = modpow(n, MOD<span class="number">-2</span>, MOD);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) F[i] = F[i]*invn%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/Guess2/p/8422205.html" target="_blank" rel="noopener">→NTT模數表←</a></p><h3 id="中國剩餘"><a href="#中國剩餘" class="headerlink" title="中國剩餘?"></a>中國剩餘?</h3><p>一個模數合不合適取決於最後答案的大小<br>兩個值域$c$、長度$n$的多項式相乘，得出來的乘積的值域最多會是$nc^2$<br>如果不會超過模數的話就可以直接使用<br>但如果會超過怎麼辦？<br>挑選更大的模數沒什麼用，因為相乘起來可能就超過long long了<br>這時我們就必須做多次NTT再用中國剩餘定理合併</p><p>如果真實的答案不是指數或階乘那種直接爆炸的數值<br>甚至還可以用來對任意數字取模(?)</p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>FFT與NTT的利用其實滿少的，大部分不是大數乘法就是生成函數，以後有時間再放一篇講好了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sieving-Method</title>
      <link href="/2019/12/24/Sieving-Method/"/>
      <url>/2019/12/24/Sieving-Method/</url>
      
        <content type="html"><![CDATA[<p>!待補QQ</p><h1 id="質數篩與快樂的積性函數"><a href="#質數篩與快樂的積性函數" class="headerlink" title="質數篩與快樂的積性函數"></a>質數篩與快樂的積性函數</h1><p>想必大家都精通各種質數篩法，最簡單的$\mathcal{O}(n\sqrt{n})$就不提啦</p><h2 id="n-log-n-篩"><a href="#n-log-n-篩" class="headerlink" title="$n\log n$篩"></a>$n\log n$篩</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i*<span class="number">2</span>; j &lt;= n; j+=i) &#123;</span><br><span class="line">sieve[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\sum \frac{1}{i}$的調和級數是$\mathcal{O}(\log n)$量級的，故複雜度為$\mathcal{O}(n\log n)$<br>這個寫法也可以很簡單的統計每個數字的因數個數</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j+=i) ++d[j];</span><br></pre></td></tr></table></figure><p>其中 <code>d[i]</code> 代表 <code>i</code> 的因數個數<br>容易發現$\sum\limits_{i=1}^n d[i]$也是$\mathcal{O}(n\log n)$量級的</p><h2 id="埃式篩"><a href="#埃式篩" class="headerlink" title="埃式篩"></a>埃式篩</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span>(!sieve[i] &amp;&amp; <span class="number">1L</span>L*i*i &lt;= n) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i*<span class="number">2</span>; j &lt;= n; j += i) &#123;</span><br><span class="line">sieve[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有質數的倒數和是$\mathcal{O}(\log\log n)$，因此複雜度是$\mathcal{O}(n\log\log n)$，而且常數頗小<br>另外對所有是合數的$n$來說，$n$的最小質因數$p$都不大於$\sqrt{n}$，因此只要從$p^2$開始篩就能保證所有合數被篩到</p><h2 id="線性篩"><a href="#線性篩" class="headerlink" title="線性篩"></a>線性篩</h2><p>線性篩的想法是想辦法讓範圍內的合數都只被其最小質因數篩到恰好一次</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!sieve[i]) primes.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> p: primes) &#123;</span><br><span class="line"><span class="keyword">if</span>(i*p &gt; n) <span class="keyword">break</span>;</span><br><span class="line">sieve[i*p] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%p == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若$i \cdot p$的最小質因數不是$p$而是$q$，則$q | i$，由code可以發現一定在更之前的迴圈就跳出了<br>故這樣複雜度能夠保證是$\mathcal{O}(n)$</p><h2 id="積性函數"><a href="#積性函數" class="headerlink" title="積性函數"></a>積性函數</h2><p>!待補QQ</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1726</title>
      <link href="/2019/12/23/TIOJ-1726/"/>
      <url>/2019/12/23/TIOJ-1726/</url>
      
        <content type="html"><![CDATA[<h1 id="Dice-Wars"><a href="#Dice-Wars" class="headerlink" title="Dice Wars"></a>Dice Wars</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1726" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1726</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Dice Wars是一款兼具謀略和運氣的遊戲。<br>遊戲中你扮演紫色的骰子，要攻下其他顏色的骰子的城池，進而統一全地圖。</p><p>如今你選到了一張看起來不錯的地圖: 整張地圖呈一條直線，每個位置都有一個顏色勢力佔領。<br>由於每次移動到相鄰異色的城池都必須經歷一場鏖戰，你想先經過程式計算後再進行遊戲。</p><p>你想要每次詢問一個顏色對$(S, T)$，問從任何一個$S$的城池到任一個$T$的城池至少要經過幾場戰鬥。<br>如果$S$或$T$已經滅亡(地圖中沒有任何一個該勢力)，就輸出$-1$。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>題敘裡面附上的遊戲好好玩www</p><p>題目要問的其實就是$\min\limits_{c_i=S,c_j=T}(|i-j|)$<br>可以想到對每種顏色開一個 <code>vector</code> 紀錄他們的index</p><p>一種naive$\mathcal{O}(nq)$的方法是每次詢問都直接把兩種顏色的兩個 <code>vector</code> <code>merge</code> $\mathcal{O}(n)$合併並計算答案<br>而另一種naive的算法則是先針對每一種顏色$\mathcal{O}(n)$預處理其對其他顏色的答案，複雜度$\mathcal{O}(n^2+q)$<br>前者拉低複雜度的關鍵是某種顏色出現很多次<br>而後者則是會因為太多種顏色而複雜度爛掉</p><p>怎麼辦呢？可以不要全部預處理，只針對出現次數超過$k$的顏色做預處理，這些顏色的種類數不會超過$\frac{n}{k}$種<br>故預處理需要$\mathcal{O}(\frac{n^2}{k})$<br>而對於詢問的兩個顏色的出現次數都沒有超過$k$的情況，可以直接用上面第一個算法處理<br>複雜度$\mathcal{O}(qk)$</p><p>根據算幾不等式可取$k=\frac{n}{\sqrt{q}}$有複雜度$\mathcal{O}(n\sqrt{q})$</p><p>註: 這題我寫的時候 <code>ans</code> 開原生陣列MLE，不知為何用vector陣列會是好的</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">60025</span>, K = <span class="number">300</span>, inf = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; id[N],ans[K];</span><br><span class="line"><span class="keyword">int</span> big[N],totb,n,q,v[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">precalc</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ans[k].resize(n+<span class="number">1</span>,inf);</span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) ans[k][i] = inf;</span></span><br><span class="line">    <span class="keyword">int</span> last;</span><br><span class="line">    last = -inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(big[v[i]] == k)</span><br><span class="line">            last = i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[k][v[i]] = min(ans[k][v[i]], i - last);</span><br><span class="line">    &#125;</span><br><span class="line">    last = inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(big[v[i]] == k)</span><br><span class="line">            last = i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[k][v[i]] = min(ans[k][v[i]], last - i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// small - small -&gt; brute every time</span></span><br><span class="line">    <span class="comment">// big - other -&gt; precalc</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) id[v[i]].pb(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(id[i].size() &gt;= S) &#123;</span><br><span class="line">        big[i] = ++totb;</span><br><span class="line">        precalc(big[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(id[a].empty() || id[b].empty()) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(id[a].size() &lt; S &amp;&amp; id[b].size() &lt; S) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A = id[a];</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B = id[b];</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, lastA = -inf, lastB = -inf, res = inf;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; A.size() || j &lt; B.size()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==B.size() || (i&lt;A.size() &amp;&amp; A[i]&lt;B[j])) &#123;</span><br><span class="line">                        <span class="keyword">int</span> t = A[i++];</span><br><span class="line">                        res = min(res, t - lastB);</span><br><span class="line">                        lastA = t;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> t = B[j++];</span><br><span class="line">                        res = min(res, t - lastA);</span><br><span class="line">                        lastB = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(big[a])</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[big[a]][b] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; ans[big[b]][a] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1674</title>
      <link href="/2019/12/19/TIOJ-1674/"/>
      <url>/2019/12/19/TIOJ-1674/</url>
      
        <content type="html"><![CDATA[<h1 id="新專輯"><a href="#新專輯" class="headerlink" title="新專輯"></a>新專輯</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1674" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1674</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>最近你打算訂購$N^2$張水樹奈奈的專輯《極限魅惑IMPACT EXCITER》。<br>由於份量實在是太多了，你決定分散成$N$份訂單。</p><p>然而，不幸的，依據博客來新的訂貨規定，每一位顧客第$k$次下訂單所訂的CD張數必頇是$k$的正整數倍。<br>換句話說，一位顧客第$5$次訂的CD張數只可能是$5$張、$10$張、$15$張、…依此類推。</p><p>當然，原先你把$N^2$張CD分散在$N$份訂單的目的就是為了讓一張訂單中最多只會有$N$張CD。<br>即使博客來多了這項奇怪的規定，你仍然不打算捨棄你的原則，只是這樣每份訂單訂的數量可能會達不到你原來的期望。</p><p>無論如何，你還是下了訂單。為了估計你實際訂下的CD數與你期望訂下的CD數的差別，你決定把每次你少訂的數量加起來。<br>可是，因為你可能少訂非常多張CD，所以你希望算出少訂的總數量除以$10^9+9$的餘數。</p><p>也就是說，如果你總共要訂$3^2$張CD，分成三次訂的話，<br>那你第一、第二、第三次分別可以訂$3$、$2$、$3$張CD，分別會少訂是$0＋1＋0＝1$張CD。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>仔細讀懂題目之後可以發現題目要求的就是</p><script type="math/tex; mode=display">\sum_{i=1}^n n\%i</script><p>不過$n$可以到$10^{13}$不能直接$\mathcal{O}(n)$跑過去</p><h3 id="數論分塊"><a href="#數論分塊" class="headerlink" title="數論分塊"></a>數論分塊</h3><p>數論分塊的精神很簡單，不同的$\lfloor n/i \rfloor$數量只有$\mathcal{O}(\sqrt{n})$種</p><p>說明:<br>對於$i \leq \sqrt{n}$，最多只有$\sqrt{n}$種不同的值<br>對於$i &gt; \sqrt{n}$，$\lfloor n/i \rfloor &lt; \sqrt{n}$最多也只有$\sqrt{n}$種不同的值</p><p>怎麼快速枚舉可能的$\lfloor n/i \rfloor$？<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j,x; i &lt;= n; i = j+<span class="number">1</span>) &#123;</span><br><span class="line">x = n/i;</span><br><span class="line">j = n/x;</span><br><span class="line"><span class="comment">// j是最大的數字使得j*x &lt;= n，意即[i,j]區間內正好是所有n/k=x的數字</span></span><br><span class="line"><span class="comment">// use n/i here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回到剛剛的式子，把他改寫成</p><script type="math/tex; mode=display">\sum_{i=1}^n n - i \cdot \lfloor \frac{n}{i} \rfloor</script><p>後面那項等價於算區間$\sum_{k=i}^j k \cdot x$<br>其中區間$[i,j]$是所有$\lfloor n/k \rfloor = x = \lfloor n/i \rfloor$的$k$<br>小學數學算一算就可以知道這是$x \cdot (\frac{j(j+1)}{2} - \frac{(i-1)i}{2})$的啦</p><p>記得小心處理模$10^9+9$的部分，尤其因為$n$可以到$10^{13}$，兩個數字乘起來的時候都要先模一次</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1000000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">modpow</span><span class="params">(ll e, ll p)</span> </span>&#123;</span><br><span class="line">    ll r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) (p&amp;<span class="number">1</span>)&amp;&amp;(r=r*e%MOD), e=e*e%MOD, p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ll n,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">1</span>,j; i &lt;= n; i = j+<span class="number">1</span>) &#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        ll x = (n/i)%MOD;</span><br><span class="line">        ll sr = (j%MOD)*((j+<span class="number">1</span>)%MOD)%MOD;</span><br><span class="line">        ll sl = (i%MOD)*((i<span class="number">-1</span>)%MOD)%MOD;</span><br><span class="line">        sum = (sum + x * (sr - sl + MOD))%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ll s = (n%MOD)*(n%MOD)%MOD;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (s - sum * modpow(<span class="number">2</span>, MOD<span class="number">-2</span>) % MOD + MOD) % MOD &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1035</title>
      <link href="/2019/12/18/TIOJ-1035/"/>
      <url>/2019/12/18/TIOJ-1035/</url>
      
        <content type="html"><![CDATA[<h1 id="通關密語"><a href="#通關密語" class="headerlink" title="通關密語"></a>通關密語</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1035" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1035</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定兩個長度小於 $5 \times 10^4$ 的小寫英文字母字串 $S,T$<br>定義「最佳擬合」，就是將 $S$ 經過平移後和 $T$ 比對，同樣的字元數最多的那一種方法。<br>請輸出一個正整數，代表最佳擬合的方案下，相同的字元有幾個。</p><p>ex.<br>對於</p><blockquote><p>ababa<br>babab</p></blockquote><p>來說，</p><blockquote><p>ababa<br>=babab</p></blockquote><p>這是一種最佳擬合的方法，$S$經過向左平移之後$S,T$有四個位置的字元相同</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>naive的$n^2$做法可以AC本題，只要妥當控制常數即可<br>不過這裡提供一個NTT的$\mathcal{O}(C\cdot n\log n)$解</p><p>假設$S$對$T$的平移量是$x$(可以為負的)，題目所求為</p><script type="math/tex; mode=display">\sum_{i-j = x} [S_i = T_j]</script><p>的最大值</p><p>那我們枚舉26種英文字母，可以寫成</p><script type="math/tex; mode=display">\sum_{c \in \sigma} \sum_{i-j = x} [S_i = c] \cdot [T_j = c]</script><p>令$F_i = [S_i = c], G_j = [T_{-j} = c]$<br>答案便是</p><script type="math/tex; mode=display">R_x = \sum_{i+j = x} F_i G_j = F * G</script><p>最後取$R$的最大值就好了，答案不會大於字串長度所以模數只要不要超小就不用關心答案被mod到<br>每次捲積交給NTT可以$\mathcal{O}(n\log n)$做完</p><p>索引值取負號可以用直接反轉字串取代，因為本題不關心偏移量$x$是多少<br>另外這題用FFT好像比較快，模的常數真的有點大<br>有一個常數優化是沒有出現過的字母就不需要NTT</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> m = <span class="number">998244353</span>, g = <span class="number">3</span>, N = <span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> rev[N];</span><br><span class="line"><span class="keyword">int64_t</span> modpow(<span class="keyword">int64_t</span> e,<span class="keyword">int64_t</span> p) &#123;</span><br><span class="line">    <span class="keyword">int64_t</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) (p&amp;<span class="number">1</span>)&amp;&amp;(r=r*e%m), e=e*e%m, p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int64_t</span> F[],<span class="keyword">int</span> n,<span class="keyword">bool</span> inv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, L = __lg(n); i &lt; n; i++) &#123;</span><br><span class="line">        rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) | ((i&amp;<span class="number">1</span>)&lt;&lt;L<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; rev[i]) swap(F[i],F[rev[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int64_t</span> root = modpow(g,(m<span class="number">-1</span>)/(step*<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span>(inv) root = modpow(root,m<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += step*<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int64_t</span> now = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; step; j++) &#123;</span><br><span class="line">                <span class="keyword">int64_t</span> a = F[i+j];</span><br><span class="line">                <span class="keyword">int64_t</span> b = F[i+j+step]*now%m;</span><br><span class="line">                F[i+j] = (a+b)%m;</span><br><span class="line">                F[i+j+step] = (a-b+m)%m;</span><br><span class="line">                now = now*root%m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(inv) &#123;</span><br><span class="line">        <span class="keyword">int64_t</span> in = modpow(n,m<span class="number">-2</span>); <span class="comment">// inv of n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) F[i] = F[i]*in%m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int64_t</span> A[],<span class="keyword">int64_t</span> B[],<span class="keyword">int64_t</span> C[],<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    NTT(A,n,<span class="number">0</span>);</span><br><span class="line">    NTT(B,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) C[i] = A[i]*B[i]%m;</span><br><span class="line">    NTT(C,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int64_t</span> A[N],B[N],C[N],ans[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> s,t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">1</span>&lt;&lt;__lg(s.size()+t.size())+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">26</span>; c++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            A[i] = (i &lt; s.size() &amp;&amp; s[i]-<span class="string">'a'</span>==c);</span><br><span class="line">            B[i] = (i &lt; t.size() &amp;&amp; t[t.size()<span class="number">-1</span>-i]-<span class="string">'a'</span>==c);</span><br><span class="line">        &#125;</span><br><span class="line">        mul(A,B,C,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans[i] += C[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *max_element(ans,ans+n) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1171-LCT</title>
      <link href="/2019/12/14/TIOJ-1171-LCT/"/>
      <url>/2019/12/14/TIOJ-1171-LCT/</url>
      
        <content type="html"><![CDATA[<h1 id="動態樹的奮鬥"><a href="#動態樹的奮鬥" class="headerlink" title="動態樹的奮鬥"></a>動態樹的奮鬥</h1><p>為了這題的Link-Cut-Tree解我花了不只一整天XD<br>壓常實在是神奇的事，把 <code>long long</code> 改成 <code>int</code> 再加上幾個 <code>pragma</code> 終於成功壓過唯一奇怪的那筆= =<br>而且 <code>push</code> 竟然還不能用遞迴寫，到底三小<br>LCT怎麼這麼可撥XD<br>不過壓過去那筆之後其他筆的執行時間加起來超少，值得了</p><p>註: 模板是參考日月卦長那裡的，大概不會有時間會為這篇補上解說吧，大家自己google</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100025</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> B = <span class="number">1</span>&lt;&lt;<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[B], *p, *q; <span class="comment">// p,q would be initialized with nullptr</span></span><br><span class="line">    <span class="keyword">if</span>(p == q &amp;&amp; (q=(p=buf)+fread(buf,<span class="number">1</span>,B,<span class="built_in">stdin</span>)) == buf) <span class="keyword">return</span> EOF;</span><br><span class="line">    <span class="keyword">return</span> *p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nextint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&gt;c || c&gt;<span class="string">'9'</span>) c = readchar();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=c&amp;&amp;c&lt;=<span class="string">'9'</span>) x = x*<span class="number">10</span> + (c^<span class="string">'0'</span>), c = readchar();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \sum&#123;cnt[p] * w[p]&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span> &#123;</span></span><br><span class="line">    <span class="comment">// Splay</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        ll ws, sum;</span><br><span class="line">        <span class="keyword">int</span> laz, cnt, w;</span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">2</span>], pa;</span><br><span class="line">    &#125; S[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// is the root of the splay tree</span></span><br><span class="line">        <span class="keyword">return</span> S[S[x].pa].ch[<span class="number">0</span>]!=x &amp;&amp; S[S[x].pa].ch[<span class="number">1</span>]!=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!i) <span class="keyword">return</span>;</span><br><span class="line">        S[i].laz += d;</span><br><span class="line">        S[i].cnt += d;</span><br><span class="line">        S[i].sum += S[i].ws * d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!i || !S[i].laz) <span class="keyword">return</span>;</span><br><span class="line">        add(S[i].ch[<span class="number">0</span>],S[i].laz);</span><br><span class="line">        add(S[i].ch[<span class="number">1</span>],S[i].laz);</span><br><span class="line">        S[i].laz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> stk[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        stk[p++] = i;</span><br><span class="line">        <span class="keyword">while</span>(!isroot(i)) stk[p++] = i = S[i].pa;</span><br><span class="line">        <span class="keyword">while</span>(p) down(stk[--p]);</span><br><span class="line">        <span class="comment">//if(!isroot(i)) push(S[i].pa);</span></span><br><span class="line">        <span class="comment">//down(i);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        S[i].ws = S[S[i].ch[<span class="number">0</span>]].ws + S[S[i].ch[<span class="number">1</span>]].ws + S[i].w;</span><br><span class="line">        S[i].sum = S[S[i].ch[<span class="number">0</span>]].sum + S[S[i].ch[<span class="number">1</span>]].sum + ll(S[i].cnt) * S[i].w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = S[x].pa, z = S[y].pa;</span><br><span class="line">        <span class="keyword">int</span> d = (S[y].ch[<span class="number">1</span>] == x);</span><br><span class="line">        S[x].pa = z;</span><br><span class="line">        <span class="keyword">if</span>(!isroot(y)) S[z].ch[S[z].ch[<span class="number">1</span>]==y] = x;</span><br><span class="line">        S[y].ch[d] = S[x].ch[!d];</span><br><span class="line">        <span class="keyword">if</span>(S[y].ch[d]) S[S[y].ch[d]].pa = y;</span><br><span class="line">        S[x].ch[!d] = y, S[y].pa = x;</span><br><span class="line">        pull(y), pull(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        push(x);</span><br><span class="line">        <span class="keyword">while</span>(!isroot(x)) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = S[x].pa;</span><br><span class="line">            <span class="keyword">if</span>(!isroot(y)) &#123;</span><br><span class="line">                <span class="keyword">int</span> z = S[y].pa;</span><br><span class="line">                <span class="keyword">if</span>(S[z].ch[<span class="number">0</span>]==y ^ S[y].ch[<span class="number">0</span>]==x) rot(x);</span><br><span class="line">                <span class="keyword">else</span> rot(y);</span><br><span class="line">            &#125;</span><br><span class="line">            rot(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// LCT</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;</span><br><span class="line">            splay(x);</span><br><span class="line">            S[x].ch[<span class="number">1</span>] = last;</span><br><span class="line">            pull(x);</span><br><span class="line">            last = x;</span><br><span class="line">            x = S[x].pa;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> S[access(v)].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        add(access(v),d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; LCT;</span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; color;</span><br><span class="line">ll sumd,sumc;</span><br><span class="line">ll dis[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nextint(), q = nextint();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = nextint()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = nextint()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> w = nextint();</span><br><span class="line">        <span class="comment">//LCT.addEdge(a,b,w);</span></span><br><span class="line">        <span class="comment">//LCT.addEdge(b,a,w);</span></span><br><span class="line">        dis[b] = dis[a] + w;</span><br><span class="line">        LCT.S[b] = &#123;w,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,w,<span class="number">0</span>,<span class="number">0</span>,a&#125;;</span><br><span class="line">        <span class="comment">//LCT.pull(b);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = nextint();</span><br><span class="line">        <span class="keyword">int</span> x = nextint()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sumd + sumc*dis[x] - <span class="number">2</span>*LCT.query(x));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!color[x]) &#123;</span><br><span class="line">            color[x] = <span class="literal">true</span>, LCT.modify(x,<span class="number">1</span>), sumc++, sumd += dis[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1950</title>
      <link href="/2019/12/13/TIOJ-1950/"/>
      <url>/2019/12/13/TIOJ-1950/</url>
      
        <content type="html"><![CDATA[<h1 id="小向的試煉-2-3：轉！-Rotate"><a href="#小向的試煉-2-3：轉！-Rotate" class="headerlink" title="小向的試煉 2-3：轉！(Rotate!)"></a>小向的試煉 2-3：轉！(Rotate!)</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1950" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1950</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定長度$N$的排列，問「以交換任意兩個數字的方式排序這個序列需要多少次數」<br>另外有$M$次修改，每次修改會交換數字$i$和數字$j$的位置，請輸出$M+1$行代表一開始和每次修改過後的答案</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>已經知道每個數字應該被放到哪裡了，所以我們可以想到一個排序方法<br>每次看某個位置$i$的數字$x$，如果和$i$不同的話就把$x$放到位置$x$的地方，再繼續對原本放在位置$x$的地方的數字做同樣的事<br>可以發現這樣會形成好幾個「環」，例如範測的$(1, 4, 2, 5, 3)$會形成兩個環</p><script type="math/tex; mode=display">\begin{pmatrix}1\end{pmatrix}\begin{pmatrix}4 & 5 & 3 & 2\end{pmatrix}</script><p>或是$(1, 6, 4, 5, 3, 2)$會形成三個環</p><script type="math/tex; mode=display">\begin{pmatrix}1\end{pmatrix}\begin{pmatrix}6 & 2\end{pmatrix}\begin{pmatrix}4 & 5 & 3\end{pmatrix}</script><p>也就是說，每個環代表第一個元素要放到第二個元素的位置，第二個元素要放到第三個元素的位置…以此類推<br>一個大小$L$的環需要的交換次數是$L-1$，所以把$1\dots n$的排列排序好所需的時間就是$n-($環的個數$)$<br>用數學一點的講法就是一個置換可以分解成好多不相交的輪換(?)而且方法是唯一的喔</p><p>考慮一下交換了兩個數字會發生什麼事:<br>如果他們在同一個「環」裡面，那那個環就會被切成兩個環<br>反之則會讓兩個環合在一起，變成一個「環」<br>示意圖大概就是這樣</p><p><img src="/images/TIOJ-1950/cycles.png" alt=""></p><p>要怎麼辦到這件事呢？快速把元素之間連接或者切斷，我們會想到使用鏈結串列，但是這樣無法判斷他們是否在同一個環裡面<br>退而求其次可以使用二元樹來維護，用$\mathcal{O}(\log n)$獲得可以剪切又可以黏貼序列的神力(?)<br>我選擇用splay來實作，詳細的原理自己google OwO</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">998244353</span>, K = <span class="number">64</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> ch[<span class="number">2</span>],pa;</span><br><span class="line">        <span class="keyword">int</span> lf[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// lf[0] is the leftmost element of this splay, lf[1] is the rightmost</span></span><br><span class="line">    &#125; T[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        T[i].lf[<span class="number">0</span>] = T[i].ch[<span class="number">0</span>] ? T[T[i].ch[<span class="number">0</span>]].lf[<span class="number">0</span>] : i;</span><br><span class="line">        T[i].lf[<span class="number">1</span>] = T[i].ch[<span class="number">1</span>] ? T[T[i].ch[<span class="number">1</span>]].lf[<span class="number">1</span>] : i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> T[x].pa==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dir</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> T[T[x].pa].ch[<span class="number">1</span>] == x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = T[x].pa, z = T[y].pa, d = dir(x);</span><br><span class="line">        T[x].pa = z;</span><br><span class="line">        <span class="keyword">if</span>(!isroot(y)) T[z].ch[dir(y)] = x;</span><br><span class="line">        T[T[x].ch[!d]].pa = y, T[y].ch[d] = T[x].ch[!d];</span><br><span class="line">        T[x].ch[!d] = y, T[y].pa = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!isroot(x)) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = T[x].pa;</span><br><span class="line">            <span class="keyword">if</span>(!isroot(y)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dir(x) ^ dir(y))</span><br><span class="line">                    rot(x);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rot(y);</span><br><span class="line">            &#125;</span><br><span class="line">            rot(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> T[x].lf[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//like DSU, present a tree with unique element(leftmost)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (A..., x, B...) -&gt; (A...) + (x, B...)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">int</span> res = T[x].ch[<span class="number">0</span>];</span><br><span class="line">        T[T[x].ch[<span class="number">0</span>]].pa = <span class="number">0</span>, T[x].ch[<span class="number">0</span>] = <span class="number">0</span>, T[x].lf[<span class="number">0</span>] = x;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (A..., x, B...) + (C..., y, D...) -&gt; (x, B...C..., y, D...A...)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y || splay(x) == splay(y)) <span class="keyword">return</span>;</span><br><span class="line">        x = T[x].lf[<span class="number">1</span>], y = T[y].lf[<span class="number">0</span>];</span><br><span class="line">        splay(x), splay(y);</span><br><span class="line">        T[y].pa = x, T[x].ch[<span class="number">1</span>] = y;</span><br><span class="line">        splay(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">poke</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(splay(x) == splay(y)) &#123;</span><br><span class="line">            <span class="comment">// (A..., x, B..., y, C...) -&gt; (x, B...) + (y, C...A...)</span></span><br><span class="line">            <span class="keyword">int</span> a = cut(x);</span><br><span class="line">            link(x,a);</span><br><span class="line">            cut(y);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// (A..., x, B...) + (C..., y, D...) -&gt; (x, B...A..., y, D...C...)</span></span><br><span class="line">            <span class="keyword">int</span> a = cut(x);</span><br><span class="line">            <span class="keyword">int</span> b = cut(y);</span><br><span class="line">            link(x,a);</span><br><span class="line">            link(y,b);</span><br><span class="line">            link(x,y);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            T[i].lf[<span class="number">0</span>] = T[i].lf[<span class="number">1</span>] = i, T[i].pa = T[i].ch[<span class="number">0</span>] = T[i].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*void dfs(int i) &#123;</span></span><br><span class="line"><span class="comment">        if(!i) return;</span></span><br><span class="line"><span class="comment">        dfs(T[i].ch[0]);</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; i &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">        dfs(T[i].ch[1]);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    void dbg(int n) &#123;</span></span><br><span class="line"><span class="comment">        //return;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; "===\n";</span></span><br><span class="line"><span class="comment">        for(int i = 1; i &lt;= n; i++) if(isroot(i)) dfs(i), cout &lt;&lt; '\n';</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; "===\n\n";</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125; cycles;</span><br><span class="line"><span class="keyword">int</span> n,q,v[N],vis[N],pos[N],ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    cycles.init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; v[i], pos[v[i]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = i; !vis[x]; x = pos[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(last) ans += cycles.poke(v[last],v[x]);</span><br><span class="line">            vis[x] = <span class="number">1</span>;</span><br><span class="line">            last = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="comment">//tr.dbg(n);</span></span><br><span class="line">    <span class="comment">//return 0;</span></span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        ans += cycles.poke(a,b);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="comment">//tr.dbg(n);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1394</title>
      <link href="/2019/12/13/TIOJ-1394/"/>
      <url>/2019/12/13/TIOJ-1394/</url>
      
        <content type="html"><![CDATA[<h1 id="黑色騎士團的逆襲野望"><a href="#黑色騎士團的逆襲野望" class="headerlink" title="黑色騎士團的逆襲野望"></a>黑色騎士團的逆襲野望</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1394" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1394</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>自從黑色騎士團上次的最終野望被白色騎士豬殺苦破滅之後，黑色騎士團銷聲滅跡了一陣子，不過他們仍繼續計畫著侵略神聖的大不列顛帝國。</p><p>終於他們發現了一個機會：原來大不列顛帝國的命脈就是對外輸出的藥品”REBRAIN”，只要能控制住它所有的運輸與加工途徑，那大不列顛帝國就完了！</p><p>與之前一樣，他們只要佔領一個據點就可以控制與他相鄰的運輸途徑了！</p><p>“REBRAIN”的運輸過程十分有趣，他有一個總工廠來製造”REBRAIN”的一些半成品，再依序經過幾個有向道路到下個加工地點進行加工，就這樣一直到完成成品，並且為了不讓產品流程出問題，他們的運輸路徑不會出現環狀或逆向的情況。</p><p>不過黑色騎士團的人手有限，所以他們希望佔據最少的據點就可以完全控制整個運輸與加工途徑。</p><p>註: 雖然是有向邊，不過相鄰的關係依然是互相的；另外雖然沒有講的很清楚，題目是有保證0號節點可以走到所有其他節點</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>題目所求是最小點覆蓋，也就是在給定圖上要選幾個點才能保證所有邊都有一個端點被選到<br>因為這題給的是DAG，所以我們可以考慮用DP的方式做</p><p>狀態$dp[i][s]$代表$i$往子孫走的邊都已經保證有端點被選到的答案，若$s=1$代表有選$i$這個點，反之沒有<br>可以知道如果沒有選$i$這個點，那他的子節點都一定要選，所以</p><script type="math/tex; mode=display">dp[i][0] = \sum\limits_{j\in son(i)} dp[j][1]</script><p>如果選了$i$這個點，那他的子節點可選可不選，我們就取比較小的那個，有</p><script type="math/tex; mode=display">dp[i][1] = 1 + \sum\limits_{j\in son(i)} \min(dp[j][0],dp[j][1])</script><p>最後取的答案是0號節點選或不選取$\min$</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">33001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">2</span>], vis[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[i]) <span class="keyword">return</span>;</span><br><span class="line">    vis[i] = <span class="literal">true</span>;</span><br><span class="line">    dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j:g[i]) &#123;</span><br><span class="line">        dfs(j);</span><br><span class="line">        dp[i][<span class="number">0</span>] += dp[j][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">1</span>] += min(dp[j][<span class="number">0</span>],dp[j][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,k; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        g[i].resize(k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> &amp;j:g[i]) <span class="built_in">cin</span> &gt;&gt; j;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>]) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1739</title>
      <link href="/2019/12/11/TIOJ-1739/"/>
      <url>/2019/12/11/TIOJ-1739/</url>
      
        <content type="html"><![CDATA[<h1 id="APIO-‘08-Beads-Interactive"><a href="#APIO-‘08-Beads-Interactive" class="headerlink" title="[APIO ‘08] Beads [Interactive]"></a>[APIO ‘08] Beads [Interactive]</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1739" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1739</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有一個長度$n$的序列$a$，一開始$a_i = i$<br>接下來有$m$個操作，每個操作只會交換相鄰的兩個數字<br>接著有$q$個詢問，每次會詢問：第$t$個操作之後，數字$x$被放到哪個位置？<br>$n,m,q \leq 3 \times 10^5; 1 \leq x \leq n; 1 \leq t \leq m$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>對序列保存不同的版本，當然持久化資料結構砸下去就對啦<br>是說本來想寫treap不過我實作能力好差QQ<br>什麼？你想問什麼是持久化？<br>反正就是用樹來存一個序列啦，然後因為改一個數字時只要改他到根的那條鏈就好了啦，這樣每次修改新增的點數會和樹高一樣</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">300025</span>, K = <span class="number">64</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lib1739.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> l,r,val;</span><br><span class="line">    &#125; S[N*K];</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> S[++tot] = &#123;<span class="number">0</span>,<span class="number">0</span>,v&#125;, tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> S[++tot] = &#123;l,r,<span class="number">0</span>&#125;, tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span> == r) <span class="keyword">return</span> newnode(l);</span><br><span class="line">        <span class="keyword">int</span> m = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> newnode(build(l,m),build(m,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> p, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l+<span class="number">1</span> == r) <span class="keyword">return</span> newnode(k);</span><br><span class="line">        <span class="keyword">int</span> m = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(p &lt; m)</span><br><span class="line">            <span class="keyword">return</span> newnode(modify(S[root].l,p,k,l,m), S[root].r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> newnode(S[root].l, modify(S[root].r,p,k,m,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span> &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(p &lt; m) r = m, root = S[root].l;</span><br><span class="line">            <span class="keyword">else</span> l = m, root = S[root].r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> S[root].val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> root[N],chg[N],v[N],pos[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    root[<span class="number">0</span>] = sgt.build(<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) v[i] = pos[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = chg[i], b = chg[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = sgt.modify(root[i<span class="number">-1</span>],v[a],pos[v[b]],<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line">        root[i] = sgt.modify(r,v[b],pos[v[a]],<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line">        swap(pos[v[a]], pos[v[b]]);</span><br><span class="line">        swap(v[a], v[b]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, chg+i);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> q = getNumQuestions();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> A,B;</span><br><span class="line">        getQuestion(A, B);</span><br><span class="line">        answer(sgt.query(root[B],A,<span class="number">1</span>,n+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1948</title>
      <link href="/2019/12/11/TIOJ-1948/"/>
      <url>/2019/12/11/TIOJ-1948/</url>
      
        <content type="html"><![CDATA[<h1 id="小向的試煉-2-1：洞穴-Cave"><a href="#小向的試煉-2-1：洞穴-Cave" class="headerlink" title="小向的試煉 2-1：洞穴(Cave)"></a>小向的試煉 2-1：洞穴(Cave)</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1948" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1948</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>小向在洞穴裡偵察到了$N$個烏龍，不知道是本尊還是分身。不過他們在洞穴中都是以每秒1公分的速度前進，只是有的朝著左邊的入口前進，而有的朝著右邊的入口前進。而由於洞穴相當狹窄，兩個相向的烏龍相撞時會回頭。小向大膽猜測，本尊一定會在所有分身都出洞穴被小向打敗後才出洞穴，瞄準小向用盡魔力的那剎那攻擊小向。不過她也沒那麼多時間等所有分身慢慢走出來再找到本尊，所以小向希望能直接用她剛剛偵察到的資訊判斷哪個是本尊。($N\leq10^6$，洞穴的長度$L\leq10^9$)</p><p>注意：離開洞穴的定義是從左邊的入口往左走一步或從右邊的入口往右走一步。保證答案唯一，並且所有烏龍都在不同位置。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先若不管烏龍的編號，只想知道烏龍最後的位置，兩個烏龍相撞並回頭時可以當作穿過去<br>顯然地，我們可以知道所有烏龍最晚離開洞穴的時刻，就等於每隻烏龍單獨放在洞穴內離開洞穴的時刻的最大值，我們也能知道最後一隻離開洞穴的烏龍是向左還是向右</p><p>接著可以發現在烏龍相撞的過程中，左右順序一定不會變，意思是如果某個編號$i$的烏龍一開始是x座標第$k$大的，那不管經過多少次的相撞，他仍然會是x座標第$k$大的<br>同時向左的烏龍數量與向右的烏龍數量也不會變<br>所以，我們可以知道最後一隻烏龍離開洞穴時，一定是左邊全部向左，右邊全部向右，而那隻最後離開的烏龍一定是「向左的烏龍中最右邊的或者向右的烏龍中最左邊的」，也就知道了最後離開的烏龍是x座標第幾大的了</p><p>用 <code>nth_element</code> 可以快速找出x座標第$k$大的編號，注意一開始他給的編號沒有按照x座標排序，上述推論必須先照x座標排序才會是對的= =</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,L,x[N],id[N],cnt;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">-1e9</span>, dir, pos;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,d; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,x+i,&amp;d);</span><br><span class="line">        <span class="keyword">int</span> dis = d ? L-x[i] : x[i];</span><br><span class="line">        <span class="keyword">if</span>(t &lt; dis) t = dis, dir = d;</span><br><span class="line">        <span class="keyword">if</span>(!d) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    pos = cnt+dir<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) id[i] = i;</span><br><span class="line">    <span class="built_in">std</span>::nth_element(id,id+pos,id+n,[](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> x[a]&lt;x[b];&#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, id[pos]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterative-SegmentTree</title>
      <link href="/2019/12/07/Iterative-SegmentTree/"/>
      <url>/2019/12/07/Iterative-SegmentTree/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代式線段樹"><a href="#迭代式線段樹" class="headerlink" title="迭代式線段樹"></a>迭代式線段樹</h1><p>先備知識: 線段樹(帶懶標) + 位元運算(吧)<br>如果讀者還不知道線段樹的原理最好看遞迴的(?)</p><h2 id="單點修改"><a href="#單點修改" class="headerlink" title="單點修改"></a>單點修改</h2><p>例題仍然是萬年RMQ</p><blockquote><p>給定一個長度$n$的序列，請支援以下操作</p><ol><li>將位置$p$的值改為$x$</li><li>查詢區間$[l,r)$的最大值</li></ol></blockquote><h3 id="完美二元樹"><a href="#完美二元樹" class="headerlink" title="完美二元樹"></a>完美二元樹</h3><p>首先假定$n$是2的冪次，思考可能可以簡單一些<br>我們一樣用<code>1</code>當根，並且節點<code>i</code>的左右子樹會是<code>i*2</code>和<code>i*2+1</code>或寫成<code>i&lt;&lt;1, i&lt;&lt;1|1</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span>&lt;&lt;<span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> tr[N&lt;&lt;<span class="number">1</span>], n;</span><br></pre></td></tr></table></figure></p><p><img src="/images/Iterative-SegmentTree/perfect.png" alt=""></p><p>對於初始化來說，可以發現葉子節點對應的都是長度$1$的區間，正好是原序列的值，所以可以直接讀入或另外傳入賦值給 <code>tr[i+n]</code>，接著可以用遞減的順序把其他長度的區間的答案算好<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> v[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) tr[i+n] = v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) tr[i] = max(tr[i&lt;&lt;<span class="number">1</span>], tr[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更新一個節點$p$，那麼只有$p$的所有祖先的答案會被影響到<br>注意 <code>p^1</code> 代表 <code>p</code> 的兄弟節點，也就是 <code>p</code> 父親的另一個兒子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(tr[p+=n] = x; p &gt; <span class="number">1</span>; p&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">        tr[p&gt;&gt;<span class="number">1</span>] = max(tr[p],tr[p^<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至於區間的查詢就沒有那麼顯然了，我們一樣必須把詢問的區間拆分成線段樹上的一些區間，而且數量不能超過$\mathcal{O}(\log n)$<br>事實上，每一層我們至多只會拿前後兩個節點，並且拿完了之後就把左界增加或右界減少，越往上待選節點所代表區間會越短<br>如果採用左閉右開的話規則可以歸納如下:</p><ol><li>首先 <code>l+=n, r+=n</code> 從最下面那層開始</li><li>重複執行直到區間為空(<code>l&gt;=r</code>)<ul><li>如果 <code>l</code> 是他父親的右子樹，則必須取走編號 <code>l</code> 的節點，並將 <code>l</code> 在該層往右一格</li><li>如果 <code>r-1</code> 是他父親的左子樹，則必須取走編號 <code>r-1</code> 的節點，並將 <code>r</code> 在該層往左一格</li><li>把 <code>l,r</code> 都往上提升一層</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l,r)</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">-1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res = max(res, tr[l++]);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res = max(res, tr[--r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯…如果看不懂的話也可以接受這就是把$[l,r)$區間拆成線段樹上$2\log n$個節點就好</p><p>和那些噁心的遞迴參數say goodbye吧! \迭代式線段樹/</p><h3 id="如果n不是2的冪次"><a href="#如果n不是2的冪次" class="headerlink" title="如果n不是2的冪次?"></a>如果n不是2的冪次?</h3><p>如果題目需要的運算有單位元素的話，可以在後面補上單位元素直到n是2的冪次<br>不過令人意外的是， <strong>上面的程式碼對任意的n都正確</strong>!<br>讓我們來看看 n = 13 的例子</p><p><img src="/images/Iterative-SegmentTree/arbitrary.png" alt=""></p><p>現在它不是一棵完美二元樹了，而是很多棵: 以 <code>2</code> 為根高度4的、以 <code>13</code> 為根高度1的、以 <code>7</code> 為根高度2的<br>畫上底線的節點在 <code>query</code> 的時候不會被動到，所以實際上它們是什麼值都沒有差<br>n不是2的冪次的時候這個演算法仍然正確的原因，可能是它可以被證明和另一個更大二元樹同構吧，不過我也不會證明所以請讀者自己參透(X)</p><p>不把n提高到2的冪次，除了讓程式碼更好看之外，空間使用量也從 $4n$ 減少到了 $2n$<br>不過同時也有一些缺點，例如不好在線段樹上二分搜，沒有 <code>1</code> 號節點代表全域的答案等等(如果沒有交換律)</p><h3 id="不遵守交換律的區間查詢"><a href="#不遵守交換律的區間查詢" class="headerlink" title="不遵守交換律的區間查詢?"></a>不遵守交換律的區間查詢?</h3><p>其實這很容易解決，直接上code<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    node resl, resr; <span class="comment">// initialized as identity</span></span><br><span class="line">    <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) resl = combine(resl, tr[l++]);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) resr = combine(tr[--r], resr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> combine(resl, resr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>畢竟區間 <code>query</code> 的原理就是拿每一層前後的區間，所以只要對前後分開存就好了<br>什麼? 你問我沒有結合律怎麼辦?<br>一個小常識是線段樹必須滿足結合律才能使用……</p><h2 id="迭代型線段樹-with-懶標"><a href="#迭代型線段樹-with-懶標" class="headerlink" title="迭代型線段樹 with 懶標"></a>迭代型線段樹 with 懶標</h2><p>進到了大家最需要，也是最常寫爛的部分了owo<br>zkw自己似乎是喜歡差分、懶標永久化之類的寫法，不過太精妙了先不解釋XD</p><p>現在題目的單點修改操作變成了區間修改</p><blockquote><ol><li>把區間$[l,r)$的數字都增加$x$</li></ol></blockquote><p>首先我們需要額外的陣列代表懶標，而其長度只需要n，因為葉子節點不需再往下傳遞懶標</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tag[N];</span><br></pre></td></tr></table></figure><h3 id="Helper-Methods"><a href="#Helper-Methods" class="headerlink" title="Helper Methods"></a>Helper Methods</h3><p>區間修改時，我們就在存取到的那些節點的答案和懶標都加上$x$，因此有了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    tr[p] += x;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; n) tag[p] += x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Iterative-SegmentTree/lazyprop.png" alt=""></p><p>再看一次這張圖，可以想像有兩條分別通過 <code>l</code> 和 <code>r-1</code> 的垂直線，這條線通過的節點是懶標會影響到目前區間答案的節點，所以必須把懶標往下傳<br>順序要由上而下，把 <code>p</code> 的祖先節點的懶標往下推<br>細節請看code</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h = __lg(n); h &gt;= <span class="number">0</span>; h--) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = p&gt;&gt;h; <span class="comment">// hth ancestor of p</span></span><br><span class="line">        <span class="keyword">if</span>(!tag[i&gt;&gt;<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        upd(i, tag[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">        upd(i^<span class="number">1</span>, tag[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">        tag[i&gt;&gt;<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外修改之後也同樣需要對 <code>l</code> 和 <code>r-1</code> 的祖先 <code>pull</code> ，順序要由下而上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// do not forget the tag[p&gt;&gt;1] term</span></span><br><span class="line">        tr[p&gt;&gt;<span class="number">1</span>] = max(tr[p],tr[p^<span class="number">1</span>])+tag[p&gt;&gt;<span class="number">1</span>];</span><br><span class="line">        p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lazy-Propagation"><a href="#Lazy-Propagation" class="headerlink" title="Lazy Propagation!"></a>Lazy Propagation!</h3><p>寫好這兩個函式後，區間修改就不是難事啦<br>別忘了:</p><ol><li><code>query</code> 前要 <code>push</code></li><li><code>modify</code> 前要 <code>push</code> ， <code>modify</code> 後要 <code>pull</code></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    push(l+n), push(r<span class="number">-1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">-1e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res = max(res, tr[l++]);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res = max(res, tr[--r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tl = l, tr = r;</span><br><span class="line">    push(l+n), push(r<span class="number">-1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;<span class="number">1</span>) upd(l++, d);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) upd(--r, d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// uses tl,tr here for l,r changed</span></span><br><span class="line">    pull(tl+n), pull(tr<span class="number">-1</span>+n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全都是同一個框架，實在是舒服啊!<br>除非時間先後順序會影響到所需的運算，例如同時有乘值和加值兩種操作，否則 <code>modify</code> 前可以不用 <code>push</code></p><h3 id="區間和"><a href="#區間和" class="headerlink" title="區間和"></a>區間和</h3><p>有人可能想到了，有些懶標操作需要區間長度，例如區間加值區間和，怎麼辦呢?<br>所有節點代表的區間長度都是2的冪次，也和它與葉子的距離有關<br>只需修改一下便可</p><p>以下順便附上完整的區間加值區間和的程式碼，以筆者習慣的風格撰寫<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum[N&lt;&lt;<span class="number">1</span>], tag[N], n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">long</span> <span class="keyword">long</span> d, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        sum[p] += d&lt;&lt;h;</span><br><span class="line">        <span class="keyword">if</span>(p &lt; n) tag[p] += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">1</span>; p&gt;<span class="number">1</span>; p&gt;&gt;=<span class="number">1</span>, h++) sum[p&gt;&gt;<span class="number">1</span>] = sum[p^<span class="number">1</span>]+sum[p] + (tag[p&gt;&gt;<span class="number">1</span>]&lt;&lt;h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> h = __lg(n); h &gt;= <span class="number">0</span>; h--) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = p&gt;&gt;h;</span><br><span class="line">            <span class="keyword">if</span>(!tag[i&gt;&gt;<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            upd(i,tag[i&gt;&gt;<span class="number">1</span>],h);</span><br><span class="line">            upd(i^<span class="number">1</span>,tag[i&gt;&gt;<span class="number">1</span>],h);</span><br><span class="line">            tag[i&gt;&gt;<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tl = l, tr = r, h = <span class="number">0</span>;</span><br><span class="line">        push(l+n), push(r<span class="number">-1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(l+=n, r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>, h++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) upd(l++,k,h);</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) upd(--r,k,h);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(tl+n), pull(tr<span class="number">-1</span>+n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// [l,r)</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        push(l+n), push(r<span class="number">-1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(l+=n, r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>, r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res += sum[l++];</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res += sum[--r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> v[],<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) sum[i+n] = v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) sum[i] = sum[i&lt;&lt;<span class="number">1</span>]+sum[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br></pre></td></tr></table></figure></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://codeforces.com/blog/entry/18051" target="_blank" rel="noopener">https://codeforces.com/blog/entry/18051</a></p><p>寫這篇好久ㄛ，本來想寫全國模擬賽的題解，不過既然學長都給了我還是算了吧(汗)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2017</title>
      <link href="/2019/12/06/TIOJ-2017/"/>
      <url>/2019/12/06/TIOJ-2017/</url>
      
        <content type="html"><![CDATA[<h1 id="B-廢文大資料-mining"><a href="#B-廢文大資料-mining" class="headerlink" title="B.廢文大資料 mining"></a>B.廢文大資料 mining</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/2017" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2017</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定一個序列 $a_i$ ，問有多少區間 $[l,r]$ 使得存在一個 $m \leq r$ 滿足 $\sum\limits_{i=l}^m a_i &lt; 0$？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>先對 $a_i$ 做前綴 $s_k = \sum\limits_{i=1}^k a_i$<br>對於一個固定的 $l$ 來說，題目等價於找到一個最小的 $m$ 使得 $s_m - s_{l-1} &lt; 0$<br>在 $m$ 之後的 $r$ 都會被算在答案裡面</p><p>可以用單調隊列幫每個 $i$ 找到最小的 $i’$ 使得 $s_{i’} &lt; s_i$ ，複雜度 $\mathcal{O}(n)$</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000025</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,a[N],stk[N],p,R[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] += a[i<span class="number">-1</span>];</span><br><span class="line">    <span class="comment">//for(int i = 0; i &lt;= n; i++) cout &lt;&lt; v[i] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; a[stk[p<span class="number">-1</span>]] &gt;= a[i]) --p;</span><br><span class="line">        R[i] = (p ? stk[p<span class="number">-1</span>]<span class="number">-1</span> : n) - i;</span><br><span class="line">        stk[p++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) sum += R[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n*(n+<span class="number">1</span>)/<span class="number">2</span> - sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1614</title>
      <link href="/2019/12/06/TIOJ-1614/"/>
      <url>/2019/12/06/TIOJ-1614/</url>
      
        <content type="html"><![CDATA[<h1 id="販賣機耶"><a href="#販賣機耶" class="headerlink" title="販賣機耶"></a>販賣機耶</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1614" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1614</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>蝴蝶在路旁玩壞一台販賣機，它一次只能投一枚硬幣（故障？）。<br>重點是：投進一枚x元的硬幣，然後按退幣鈕，居然會吐出一枚價值 $f(x)$ 的硬幣耶！<br>更神秘的是，天才蝴蝶已經發現 $f(x) = x + (x-b_1) (x-b_2) (x-b_3) \dots (x-b_m)$。<br>現在蝴蝶手上有 $n$ 枚硬幣，分別是 $a_1 \dots a_n$，請問蝴蝶投進去會賺的硬幣有幾枚？</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>題目就是問$f(x)-x = \prod\limits_{i=1}^m (x-b_i)$是不是正的<br>然後看有幾個$b_i$小於$x$就可以知道乘積的正負號了(國中數學??)<br>另外注意$x - b_i = 0$的case，然後也不要亂 <code>unique</code> ，要保持個數的奇偶性。</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100025</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[N],b[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    sort(b,b+m);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = lower_bound(b,b+m,a[i]) - b;</span><br><span class="line">        <span class="keyword">if</span>(!(a[i] == b[j] || (j&amp;<span class="number">1</span>))) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast-IO</title>
      <link href="/2019/12/06/Fast-IO/"/>
      <url>/2019/12/06/Fast-IO/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的輸入-出-優化"><a href="#常用的輸入-出-優化" class="headerlink" title="常用的輸入(出)優化"></a>常用的輸入(出)優化</h1><h2 id="cin-cout"><a href="#cin-cout" class="headerlink" title="cin / cout"></a>cin / cout</h2><p>因為C++ template的性質，不同變數型別的輸出方式都大同小異，算是實用<br>競程的時候記得開下面兩個東西</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>開了之後就不要使用 stdio 裡面的東西啦<br>另外若非互動題也不要使用 <code>endl</code> 之類會flush的函式，請用 <code>&#39;\n&#39;</code> 代替</p><h2 id="scanf-printf"><a href="#scanf-printf" class="headerlink" title="scanf / printf"></a>scanf / printf</h2><p>常用的也就那些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;L);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, x+y+L);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++) s[i] = (s[i]-<span class="string">'a'</span>+<span class="number">1</span>)%<span class="number">26</span>+<span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是 iostream 的空間有點大，所以想要壓空間用 stdio 就對了<br>另外 <code>printf</code> 格式化輸出也常常會在毒瘤題派上用場XD，例如TIOJ 1845</p><h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p><code>scanf</code> 和 <code>cin</code> 都判了很多case(的感覺)<br>對於競賽中固定的輸入格式，自己用 <code>getchar()</code> 一個一個字元讀比較快</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nextint</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, c = getchar(), neg = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>((<span class="string">'0'</span> &gt; c || c &gt; <span class="string">'9'</span>) &amp;&amp; c!=<span class="string">'-'</span> &amp;&amp; c!=EOF) c = getchar();</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'-'</span>) neg = <span class="literal">true</span>, c = getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>) x = x*<span class="number">10</span> + (c^<span class="string">'0'</span>), c = getchar();</span><br><span class="line"><span class="keyword">if</span>(neg) x = -x;</span><br><span class="line"><span class="keyword">return</span> x; <span class="comment">// returns 0 if EOF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要印出數字用 <code>printf</code> 就好，如果必須輸出很多可以先存到陣列最後再一起印出，輸出似乎不常成為瓶頸。</p><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>快! 還要更快! 如果輸入非常多的時候，我們可以把getchar改成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">readchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">1</span>&lt;&lt;<span class="number">20</span>; <span class="comment">// buffer size</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> buf[S], *p = buf, *q = buf;</span><br><span class="line"><span class="keyword">if</span>(p == q &amp;&amp; (q = (p=buf)+fread(buf,<span class="number">1</span>,S,<span class="built_in">stdin</span>)) == buf) <span class="keyword">return</span> EOF;</span><br><span class="line"><span class="keyword">return</span> *p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理可能是自己實現緩衝區，對檔案的讀寫一次做多一點會比較快吧<br>這個超有感， <code>1e7</code> 左右的輸入只要不到50ms，有夠扯，例如TIOJ 1093</p><h2 id="unlocked"><a href="#unlocked" class="headerlink" title="unlocked"></a>unlocked</h2><p>有些可以在後綴加上unlocked加速的樣子，可是我常常感覺不到有快多少(?)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getchar() -&gt; getchar_unlocked()</span><br><span class="line">putchar() -&gt; putchar_unlocked()</span><br><span class="line">fread() -&gt; fread_unlocked()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1927</title>
      <link href="/2019/12/06/TIOJ-1927/"/>
      <url>/2019/12/06/TIOJ-1927/</url>
      
        <content type="html"><![CDATA[<h1 id="同步-Sync"><a href="#同步-Sync" class="headerlink" title="同步(Sync)"></a>同步(Sync)</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1927" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1927</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在一個多人單向卷軸遊戲中，有$N \leq 10^5$個格子，每個格子都有一個不超過$10^9 + 6$的正整數，代表該格的狀況。<br>有時遊戲中的兩人會產生「同步」的現象。產生同步的條件是兩人所在的格子的數字$a,b$分別滿足</p><script type="math/tex; mode=display">(ab)^{\frac{p-1}{2}} \equiv 1 \pmod p</script><p>其中$p = 10^9 + 7$。產生同步後，兩人會瞬移至下一格。如果在下一格又產生「同步」，則會繼續往下走，直到其中一人超出格子範圍(到了終點了)或者兩人不再同步。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>對於$x \not\equiv 0 \pmod p$，$y = x^{\frac{p-1}{2}} \equiv \pm 1 \pmod p$<br>因為$y$是$1$的平方根(?)<br>然後$(ab)^{\frac{p-1}{2}} \equiv a^{(\frac{p-1}{2})} b^{(\frac{p-1}{2})}$<br>所以可先把所有值先$(p-1)/2$次方，一定會是$\pm 1$，接著他們同步的條件就可以簡化成$a = b$了</p><p>考慮到同步必須要是連續的性質，我們聯想到字串演算法中的後綴陣列，這題等價求兩個後綴的<code>LCP</code>，完全是<code>SA</code>的形狀XDD<br><code>SA</code> + RMQ資結收工</p><p>注意查詢兩個同樣位置的情況，RMQ會查到空區間，不過我們知道這時候的答案顯然就是到尾巴的長度</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">256</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function">ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;</span><br><span class="line">    ll r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) (p&amp;<span class="number">1</span>)&amp;&amp;(r=r*e%m), e=e*e%m, p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixArray</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sa[N],rk[N],tmp[N],lcp[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(T v[],<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rk[i] = v[i];</span><br><span class="line">        iota(sa,sa+n,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> L = <span class="number">1</span>; L &lt; n; L*=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> cmp = [&amp;](<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rk[a]!=rk[b]) <span class="keyword">return</span> rk[a]&lt;rk[b];</span><br><span class="line">                <span class="keyword">int</span> ra = (a+L&lt;n ? rk[a+L] : <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">int</span> rb = (b+L&lt;n ? rk[b+L] : <span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">return</span> ra&lt;rb;</span><br><span class="line">            &#125;;</span><br><span class="line">            sort(sa,sa+n,cmp);</span><br><span class="line">            tmp[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">                tmp[sa[i]] = tmp[sa[i<span class="number">-1</span>]] + cmp(sa[i<span class="number">-1</span>],sa[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rk[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for(int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">            for(int j = sa[i]; j &lt; n; j++) cout &lt;&lt; v[j] &lt;&lt; ' ';</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; '\n';</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        lcp[n<span class="number">-1</span>] = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, h = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!rk[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(h &gt; <span class="number">0</span>) --h;</span><br><span class="line">            <span class="keyword">int</span> j = sa[rk[i]<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(i+h&lt;n &amp;&amp; j+h&lt;n &amp;&amp; v[i+h]==v[j+h]) ++h;</span><br><span class="line">            lcp[rk[i]<span class="number">-1</span>] = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for(int i = 0; i &lt; n; i++) cout &lt;&lt; lcp[i] &lt;&lt; ' ';</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SuffixArray&lt;<span class="keyword">int</span>&gt; SA;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mn[N&lt;&lt;<span class="number">1</span>],n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> v[],<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) mn[i+n] = v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) mn[i] = min(mn[i&lt;&lt;<span class="number">1</span>], mn[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; "qry: ";</span></span><br><span class="line">        <span class="comment">//for(int i = l; i &lt; r; i++) cout &lt;&lt; mn[i+n] &lt;&lt; ' '; cout &lt;&lt; '\n';</span></span><br><span class="line">        <span class="keyword">int</span> res = inf;</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res = min(res, mn[l++]);</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res = min(res, mn[--r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; RMQ;</span><br><span class="line"><span class="keyword">int</span> n,q,v[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v[i] = modpow(v[i], (MOD<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">    SA.init(v,n);</span><br><span class="line">    RMQ.init(SA.lcp,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,a,b; i &lt; q; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span>(a == b) <span class="built_in">cout</span> &lt;&lt; n-a &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l = SA.rk[a], r = SA.rk[b];</span><br><span class="line">            <span class="keyword">if</span>(l &gt; r) swap(l,r);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; RMQ.query(l,r) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1774</title>
      <link href="/2019/12/05/TIOJ-1774/"/>
      <url>/2019/12/05/TIOJ-1774/</url>
      
        <content type="html"><![CDATA[<h1 id="Ch3-Section-9-妁艷的頭髮"><a href="#Ch3-Section-9-妁艷的頭髮" class="headerlink" title="Ch3. Section 9. 妁艷的頭髮"></a>Ch3. Section 9. 妁艷的頭髮</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1774" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1774</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>裸背包，被值域嚇到XD<br>不過實際上魔力<code>M</code>只會到2000所以沒差的啦</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,M,dp[<span class="number">2001</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,h,c; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; h &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = c; j &lt;= M; j++) dp[j] = max(dp[j-c]+h, dp[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[M] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2019</title>
      <link href="/2019/12/05/TIOJ-2019/"/>
      <url>/2019/12/05/TIOJ-2019/</url>
      
        <content type="html"><![CDATA[<h3 id="Author-Sean-Liu"><a href="#Author-Sean-Liu" class="headerlink" title="Author: Sean Liu"></a>Author: Sean Liu</h3><h1 id="D-番茄大戰爭"><a href="#D-番茄大戰爭" class="headerlink" title="D.番茄大戰爭"></a>D.番茄大戰爭</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/2019" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2019</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>兩個人在玩剪刀石頭布，而他們兩個人玩了$T$個回合。兩個人（此處稱為小奕和小安）各自有一個「策略」，分別為兩個字串$A$和$B$。兩個字串皆由<code>R</code>、<code>P</code>、<code>S</code>三個字元組成，分別代表小奕和小安會出石頭、布、剪刀。兩個人都會根據他們的「策略」出題，在第$i$個回合，小奕將會出$A_{i \mod {|A|}}$，而小安將出$B_{i \mod{|B|}}$，從$i = 0$開始。請輸出：經過$T$個回合後，兩人分別贏了幾局，平手了幾局。</p><p>保證滿足：$1 \leq T \leq 10^9$，$1 \leq |A|, |B| \leq 10^6$，且$A, B$由<code>R</code>、<code>P</code>、<code>S</code>三個字元組成。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>首先，看到$1 \leq T \leq 10^9$當然想說直接給他寫個$\mathcal{O}(T)$，寫了五分鐘之後傳上去——AC——了前幾筆，之後就TLE了。所以，當然就來想怪做法嘍！ </p><p>先假設$|A| \leq |B|$。第一個想法就是，對於$A$裏頭的每一個字元$A_i$，我都看一次我會遇到哪些字元（$B_i, B_{i + |A|}, B_{i + 2\times|A|}, \dots$，也就是所有滿足$(i + k|A|) \mod{|B|} \leq T$的$B_{(i + k|A|)\mod{|B|}}$，然後再$\mathcal{O}(1)$更新答案。這樣複雜度依然為$\mathcal{O}(T)$，因為還是每一個時間點都有戳到一次，只是改變順序而已了。不過！這個順序很重要，因為可以優化！</p><p>若我們看$A_i$，我們先考慮它會遇到那些$B$的字元<script type="math/tex">B_i, B_{i + |A|}, B_{i + 2\times|A|}, \dots</script>，也就是所有的$B_{i + k|A| \mod{|B|}}$。可以知道，這樣分可以將$B$的所有字元分成若干個相斥的群組$G_t$！具體做法就是，先看$A_i$，如果$B_i$尚未在一個群組裡面，就創立一個新的群組然後將所有的$B_{i + k|A|}$加進去這個群組裡面。現在，就想要用這個新的資料儲存方式來加快我們的運算。</p><p>同樣的，我們將注意力集中於$A$的字元$A_i$。如果知道這個字元會被掃到幾次（假設是$k$），那是不是可以從$B_i$在其所屬的群組$G$的位子開始爬$k$次（超過邊界就回到$0$）來計算？這樣就會有累加的感覺了，所以下一步就是——對各個群組計算其各個出法（剪刀石頭布）的前綴！所以，我們可以定義$S(i, j, k)$為第$i$個群組中，符號為$j$（以$0,1,2$表示，對應到剪刀石頭布各一），前$k$個位置的前綴和。</p><p>大致的想法知道了，就可以開始去處理細節了！這題細節頗多，彷彿魚刺，得小心！不過，越多魚刺的魚往往更為鮮甜，勿以此而退縮！</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><p>對不起有點亂qwq 至少目前跑的比<code>baluteshih</code>快啦XD</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ericxiao ios_base::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, gc = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'R'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'P'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; where;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; groups[maxN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre[maxN][<span class="number">3</span>]; <span class="comment">//ijk: ith group, jth symbol, kth prefix</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ericxiao;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">bool</span> hS = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.length() &gt; b.length())&#123;</span><br><span class="line">        swap(a, b);</span><br><span class="line">        hS = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    where.resize(b.length());</span><br><span class="line">    fill(where.begin(), where.end(), pii(&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;));</span><br><span class="line">    <span class="keyword">int</span> cg, ind, w = <span class="number">0</span>, l = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(where[i].F != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        cg = gc++, ind = i;</span><br><span class="line">        <span class="keyword">while</span>(where[ind].F == <span class="number">-1</span>)&#123;</span><br><span class="line">            where[ind] = &#123;cg, groups[cg].size()&#125;;</span><br><span class="line">            groups[cg].push_back(ind);</span><br><span class="line">            ind = ( ind + a.length() ) % b.length();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> g = <span class="number">0</span>; g &lt; gc; g++)&#123;</span><br><span class="line">        pre[g][<span class="number">0</span>].resize(groups[g].size());</span><br><span class="line">        pre[g][<span class="number">1</span>].resize(groups[g].size());</span><br><span class="line">        pre[g][<span class="number">2</span>].resize(groups[g].size());</span><br><span class="line">        pre[g][<span class="number">0</span>][<span class="number">0</span>] = pre[g][<span class="number">1</span>][<span class="number">0</span>] = pre[g][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pre[g][getId(b[groups[g][<span class="number">0</span>]])][<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; groups[g].size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) pre[g][j][i] = pre[g][j][i - <span class="number">1</span>];</span><br><span class="line">            pre[g][getId(b[groups[g][i]])][i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> jf, tlt, rem, frqs[<span class="number">3</span>], myId;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= T) <span class="keyword">continue</span>;</span><br><span class="line">        jf = (T - i - <span class="number">1</span>) / a.length() + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//ijk: ith group, jth symbol, kth prefix</span></span><br><span class="line">        <span class="comment">//group index: groups[where[i].F]</span></span><br><span class="line">        <span class="comment">//position in group: where[i].S</span></span><br><span class="line">        <span class="comment">//want to loop forward (T - i) / a.length() times</span></span><br><span class="line">        <span class="comment">//total loop time:</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (group.size() - [group pos]) + tlt * |group| &lt;= jf</span></span><br><span class="line"><span class="comment">        tlt = (jf - group.size() + [group pos]) / |group|</span></span><br><span class="line"><span class="comment">        remaining number to go: jf - ((group.size() - [group pos]) + tlt * |group|)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span>(jf + where[i].S &gt;= groups[where[i].F].size())&#123;</span><br><span class="line">            tlt = (jf - (groups[where[i].F].size() - where[i].S)) / groups[where[i].F].size();</span><br><span class="line">            rem = jf - (groups[where[i].F].size() - where[i].S + tlt * groups[where[i].F].size());</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">                frqs[j] = pre[where[i].F][j][groups[where[i].F].size() - <span class="number">1</span>] * (tlt + <span class="number">1</span>) + (rem ? pre[where[i].F][j][rem - <span class="number">1</span>] : <span class="number">0</span>) - (where[i].S ? pre[where[i].F][j][where[i].S - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">                frqs[j] = pre[where[i].F][j][jf + where[i].S - <span class="number">1</span>] - (where[i].S ? pre[where[i].F][j][where[i].S - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myId = getId(a[i]);</span><br><span class="line">        w += frqs[(myId + <span class="number">2</span>) % <span class="number">3</span>];</span><br><span class="line">        l += frqs[(myId + <span class="number">1</span>) % <span class="number">3</span>];</span><br><span class="line">        d += frqs[(myId) % <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!hS)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="string">" "</span> &lt;&lt; w &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    100</span></span><br><span class="line"><span class="comment">    RRR</span></span><br><span class="line"><span class="comment">    PPPP</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    S</span></span><br><span class="line"><span class="comment">    RPPPSPPRSS</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1171</title>
      <link href="/2019/12/04/TIOJ-1171/"/>
      <url>/2019/12/04/TIOJ-1171/</url>
      
        <content type="html"><![CDATA[<h1 id="我要成為海賊王"><a href="#我要成為海賊王" class="headerlink" title="我要成為海賊王"></a>我要成為海賊王</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1171" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1171</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定一棵樹，一開始所有頂點都是白色的，有$q$次操作，每次操作可以把一個頂點塗成黑色，或者詢問某個頂點$x$到所有黑色頂點的距離和</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>可能算是經典題吧，這邊提供兩種寫法: 重心剖分和輕重鍊剖分</p><h3 id="重心剖分"><a href="#重心剖分" class="headerlink" title="重心剖分"></a>重心剖分</h3><p>重心剖分的核心想法是樹分治，每次拔掉一個點，並統計有經過這個點的答案並遞迴計算沒經過該點的答案<br>為了確保複雜度，每次拔掉重心是一個好選擇<br>也許可以發現每個頂點都會當一次重心(?)<br>並且若把每次拔掉的重心$c$和分治下去的每個子樹找到的重心$c’$都連邊，也會是一棵樹，稱為重心樹</p><p>假設我要查詢$x$這個點，我們就枚舉$x$在重心樹上的祖先<br>對於所有黑色頂點$b$來說都可以找到恰一個祖先$c$使得$b,x$最後是被$c$分開的<br>可以想到紀錄$cnt_c, sum_c$分別代表分治到以$c$為重心的時候的子樹中，黑色節點的數量以及與$c$的距離和<br>加加減減就能得到答案了<br>算式好難推QQ去查了YP的題解才知道怎麼寫</p><p>記得在重心樹往上爬的時候必須減掉和下一層有關的一些東西，要避免有重複的邊的路徑被計算到<br>式子可能長得像這樣吧</p><script type="math/tex; mode=display">\sum_{p\not=croot} sum_q + cnt_q \cdot path(q,x) - sum_p - cnt_p \cdot path(p,q)</script><p>其中$q$是$p$在重心樹上的父節點</p><p>每次詢問的複雜度是重心樹的深度也就是$\mathcal{O}(\log n)$</p><h3 id="輕重鍊剖分"><a href="#輕重鍊剖分" class="headerlink" title="輕重鍊剖分"></a>輕重鍊剖分</h3><p>用$b$和$B$代表黑色頂點和他們的集合，$dis_v$代表從根走到$v$的距離<br>把所求寫成</p><script type="math/tex; mode=display">\sum_{b\in B} dis_x + \sum_{b\in B} dis_b - 2\sum_{b\in B} dis_{LCA(b,x)} = |B|dis_x + \sum_{b\in B}dis_b - 2 \sum_{b\in B} dis_{LCA(b,x)}</script><p>關注最後一項，想成枚舉$x$到根的所有邊$e$<br>可以發現：$dis_{LCA(b,x)}$有包含某個$e$ $\Leftrightarrow$ $b$到根會經過$e$且$x$到根會經過$e$<br>所以對每個邊維護一個值$sum_e$，把一個點$x$塗黑的時候就把$x$到根會經過的$sum_e$都加上$e$的長度，查詢$x$的時候就看$x$到根所有邊的$sum_e$總和<br>如果畫成圖大概長這樣<br><img src="/images/TIOJ-1171/HLD.png" alt="404 QQ"><br>紅藍紫代表那個邊被加幾次，而橘色的框框代表查詢$x$要看的邊</p><p>按照慣例把算邊改成算點，用$e$深度較深的點來代表$e$<br>輕重鍊剖分可以把點到根的路徑分成遍歷順序的$\mathcal{O}(\log n)$個區間，再搭配一個線段樹處理「區間加值、區間加權和」就可以啦</p><p>這個寫法每次詢問的複雜度是$\mathcal{O}(\log^2n)$，如果用link-cut-tree可以到$\mathcal{O}(\log n)$的樣子</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><p>因為1-base好像比較安全我就擅自把輸入都+1了OwO</p><h3 id="重心剖分-1"><a href="#重心剖分-1" class="headerlink" title="重心剖分"></a>重心剖分</h3><p>好醜(X<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast,unroll-loops,no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) begin(v),end(v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> siz(v) (ll(v.size()))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> get_pos(v,x) (lower_bound(all(v),x)-begin(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sort_uni(v) sort(begin(v),end(v)),v.erase(unique(begin(v),end(v)),end(v))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (l+(r-l&gt;&gt;1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(v,x) memset(v,x,sizeof v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ld,ld&gt; pld;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> max_heap = __gnu_pbds::priority_queue&lt;T,less&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> min_heap = __gnu_pbds::priority_queue&lt;T,greater&lt;T&gt; &gt;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> rbt = tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;</span><br><span class="line"><span class="keyword">constexpr</span> ld PI = <span class="built_in">acos</span>(<span class="number">-1</span>), eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">20191126</span>, K = <span class="number">20</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> ll <span class="title">cdiv</span><span class="params">(ll x, ll m)</span> </span>&#123; <span class="keyword">return</span> (x+m<span class="number">-1</span>)/m; &#125; <span class="comment">// ceiling divide, x/m for flooring divide</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">M</span><span class="params">(T &amp;x, ll m=MOD)</span></span>&#123;x%=m; <span class="keyword">if</span>(x&lt;<span class="number">0</span>) x+=m;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    ll v,w; <span class="comment">// v=a^b</span></span><br><span class="line">&#125; E[N];</span><br><span class="line"><span class="keyword">int</span> vis[N],sz[N],mxs[N],cpa[N],cdep[N];</span><br><span class="line">ll dis[K][N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N],tmp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>, mxs[u] = <span class="number">0</span>, sz[u] = <span class="number">1</span>;</span><br><span class="line">    tmp.pb(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id:g[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[id].v^u;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]) dfs(v), mxs[u] = max(mxs[u], sz[v]), sz[u] += sz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span> </span>&#123; <span class="comment">// get distance to centroid whose depth is d</span></span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id:g[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[id].v^u;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]) dis[d][v] = dis[d][u]+E[id].w, get_dis(v,d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deco</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dep=<span class="number">1</span>,<span class="keyword">int</span> pa=<span class="number">0</span>)</span> </span>&#123; <span class="comment">// centroid decomposition</span></span><br><span class="line">    tmp.clear();</span><br><span class="line">    dfs(u);</span><br><span class="line">    <span class="keyword">int</span> c = u, S = tmp.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:tmp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(max(S-sz[i],mxs[i]) &lt; max(S-sz[c], mxs[c])) c = i;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[dep][c] = <span class="number">0</span>;</span><br><span class="line">    get_dis(c,dep);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i:tmp) vis[i] = <span class="number">0</span>;</span><br><span class="line">    vis[c] = <span class="literal">true</span>;</span><br><span class="line">    cpa[c] = pa;</span><br><span class="line">    cdep[c] = dep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id:g[c]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = E[id].v^c;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v]) deco(v,dep+<span class="number">1</span>,c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans[N],re[N],cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = p, d = cdep[p]; x; x = cpa[x], --d) &#123;</span><br><span class="line">        ans[x] += dis[d][p];</span><br><span class="line">        re[x] += dis[d<span class="number">-1</span>][p];</span><br><span class="line">        ++cnt[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = p, d = cdep[p]; x; x = cpa[x], --d) &#123;</span><br><span class="line">        res += (ans[x] - re[x]) + (cnt[x] - now) * dis[d][p];</span><br><span class="line">        now = cnt[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt;N&gt; color;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,a,b,w; i &lt; n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w, a++, b++;</span><br><span class="line">        E[i] = &#123;a^b,w&#125;;</span><br><span class="line">        g[a].pb(i), g[b].pb(i);</span><br><span class="line">    &#125;</span><br><span class="line">    deco(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; cpa[i] &lt;&lt; " \n"[i==n];</span></span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; cdep[i] &lt;&lt; " \n"[i==n];</span></span><br><span class="line">    <span class="comment">//for(int i = 1; i &lt;= n; i++) cout &lt;&lt; dis[1][i] &lt;&lt; " \n"[i==n];</span></span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t,v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; v, v++;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; query(v) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">1</span> &amp;&amp; !color[v]) color[v] = <span class="literal">true</span>, update(v);</span><br><span class="line">        <span class="comment">//for(int i = 1; i &lt;= n; i++) cout&lt;&lt;ans[i]&lt;&lt;" \n"[i==n];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="輕重鍊剖分-1"><a href="#輕重鍊剖分-1" class="headerlink" title="輕重鍊剖分"></a>輕重鍊剖分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100001</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">256</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">    ll w[N&lt;&lt;<span class="number">1</span>],sum[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> laz[N],n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _w[],<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) w[i+n] = _w[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) w[i] = w[i&lt;&lt;<span class="number">1</span>]+w[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        sum[p] += d*w[p];</span><br><span class="line">        <span class="keyword">if</span>(p &lt; n) laz[p] += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(p&gt;<span class="number">1</span>) sum[p&gt;&gt;<span class="number">1</span>] = sum[p]+sum[p^<span class="number">1</span>]+laz[p&gt;&gt;<span class="number">1</span>]*w[p&gt;&gt;<span class="number">1</span>], p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> h = __lg(n); h &gt;= <span class="number">0</span>; h--) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = p&gt;&gt;h;</span><br><span class="line">            <span class="keyword">if</span>(!laz[i&gt;&gt;<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            upd(i,laz[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">            upd(i^<span class="number">1</span>,laz[i&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">            laz[i&gt;&gt;<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = l, R = r;</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) upd(l++,d);</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) upd(--r,d);</span><br><span class="line">        &#125;</span><br><span class="line">        pull(L+n), pull(R<span class="number">-1</span>+n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        push(l+n), push(r<span class="number">-1</span>+n);</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res += sum[l++];</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res += sum[--r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeavyLightDecomposition</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> cost,to;&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; g[N];</span><br><span class="line">    <span class="keyword">int</span> pa[N],pa_d[N];</span><br><span class="line">    <span class="keyword">int</span> sz[N],mxs[N],id[N],link_top[N];</span><br><span class="line">    <span class="keyword">int</span> weight[N],sumc,tot;</span><br><span class="line">    ll dis[N],sumd;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        g[a].push_back(&#123;c,b&#125;);</span><br><span class="line">        g[b].push_back(&#123;c,a&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        sz[i] = <span class="number">1</span>;</span><br><span class="line">        mxs[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;edge:g[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = edge.to;</span><br><span class="line">            <span class="keyword">int</span> c = edge.cost;</span><br><span class="line">            <span class="keyword">if</span>(j == pa[i]) <span class="keyword">continue</span>;</span><br><span class="line">            pa[j] = i;</span><br><span class="line">            pa_d[j] = c;</span><br><span class="line">            dis[j] = dis[i] + c;</span><br><span class="line">            dfs(j);</span><br><span class="line">            sz[i]+=sz[j];</span><br><span class="line">            <span class="keyword">if</span>(mxs[i]==<span class="number">0</span> || sz[j] &gt; sz[mxs[i]]) mxs[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deco</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        link_top[i] = t;</span><br><span class="line">        weight[id[i] = tot++] = pa_d[i];</span><br><span class="line">        <span class="keyword">if</span>(mxs[i]) deco(mxs[i],t);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;edge:g[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = edge.to;</span><br><span class="line">            <span class="keyword">if</span>(j == pa[i] || j == mxs[i]) <span class="keyword">continue</span>;</span><br><span class="line">            deco(j,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        deco(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        sgt.init(weight,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">poke</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sumd += dis[x];</span><br><span class="line">        ++sumc;</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = link_top[x];</span><br><span class="line">            sgt.edit(id[y],id[x]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">            x = pa[y];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ll res = sumc * dis[x] + sumd;</span><br><span class="line">        <span class="keyword">while</span>(x) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = link_top[x];</span><br><span class="line">            res -= <span class="number">2</span>*sgt.query(id[y],id[x]+<span class="number">1</span>);</span><br><span class="line">            x = pa[y];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; HLD;</span><br><span class="line"><span class="keyword">bool</span> color[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,a,b,c; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        ++a, ++b;</span><br><span class="line">        HLD.add_edge(a,b,c);</span><br><span class="line">    &#125;</span><br><span class="line">    HLD.init(n);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> t,x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t &gt;&gt; x, ++x;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!color[x]) color[x] = <span class="number">1</span>, HLD.poke(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; HLD.query(x) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1197</title>
      <link href="/2019/12/04/TIOJ-1197/"/>
      <url>/2019/12/04/TIOJ-1197/</url>
      
        <content type="html"><![CDATA[<h1 id="排教室問題"><a href="#排教室問題" class="headerlink" title="排教室問題"></a>排教室問題</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1197" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1197</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>某校有M種不同的課程，其中有些課程的時間會有衝堂。如果學校中總共有N間不同的教室，請問共有多少種安排各課程上課教室的方式？最少要用到幾間教室？<br>$M,N \leq 10$</p><p>註: 衝堂的意思是他們不能被安排在同一個教室</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>題目可以想成給定一張圖，每個頂點有$k$種顏色可以塗，定義合法塗色是讓相鄰頂點無同色的塗色方式，問有幾種合法塗色的方式以及至少要用多少顏色才能合法塗色<br>一開始覺得這是暴搜題，但忽然想到可能不連通也可能會有環之後就不太知道怎麼實作<br>另外題敘好像沒有講到，不過這題讀邊的時候要用<code>EOF</code>讀</p><p>這題我的寫法是位元DP，考慮狀態$dp[S][c]$代表$c$之前的顏色都用過了，並且$S$這個subset已經被塗過了<br>那轉移可以想成把$S$的一個subset$X$都塗上$c$這個顏色，當然$X$中任意兩個頂點都不相鄰(也就是說$X$是獨立集)，式子長得像</p><script type="math/tex; mode=display">dp[S][c] = \sum\limits_{X \subseteq S, Valid(X)} dp[S \setminus X][c-1]</script><p>其中$Valid(X)$代表$X$是否為獨立集，可以先預處理<br>預處理獨立集可以做到$\mathcal{O}(n \cdot 2^n)$，而後面枚舉$k$次子集則是$\mathcal{O}(k \cdot 3^n)$</p><p>註: 一次枚舉複雜度是$\mathcal{O}(3^n)$的原因可以參考 <a href="https://cp-algorithms.com/algebra/all-submasks.html" target="_blank" rel="noopener">https://cp-algorithms.com/algebra/all-submasks.html</a></p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k,n,a,b,valid[<span class="number">1</span>&lt;&lt;N],g[N][N];</span><br><span class="line">ll dp[<span class="number">1</span>&lt;&lt;N][N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)) --a, --b, g[a][b] = g[b][a] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span>&lt;&lt;n); s++) valid[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span>&lt;&lt;n); s++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) <span class="keyword">if</span>(s &amp; (<span class="number">1</span>&lt;&lt;i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!valid[s ^ (<span class="number">1</span>&lt;&lt;i)]) valid[s] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) <span class="keyword">if</span>(s &amp; (<span class="number">1</span>&lt;&lt;j)) <span class="keyword">if</span>(g[i][j]) valid[s] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> S = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= max(k,n); c++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span>&lt;&lt;n); s++) &#123;</span><br><span class="line">            dp[s][c] = dp[s][c<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> f = s; f; f = (f<span class="number">-1</span>)&amp;s) <span class="keyword">if</span>(valid[f]) &#123;</span><br><span class="line">                dp[s][c] += dp[s^f][c<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[S][c]) ans = min(ans, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n%d\n"</span>,dp[S][k],ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>話說雖然感覺會需要<code>long long</code>不過TIOJ上似乎沒有會超過<code>int</code>的測資</p><p>另外利用Fast Subset Convolution可以讓後面那部分從$\mathcal{O}(3^n)$壓到$\mathcal{O}(n^22^n)$<br>可以參考 <a href="https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf" target="_blank" rel="noopener">https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf</a><br>不過常數蠻大的，要$n$大一點才看得出來差異</p>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-2021</title>
      <link href="/2019/12/04/TIOJ-2021/"/>
      <url>/2019/12/04/TIOJ-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="F-無限兔子問題"><a href="#F-無限兔子問題" class="headerlink" title="F.無限兔子問題"></a>F.無限兔子問題</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/2021" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/2021</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>令$F_i$是費式數列<br>給定$s,t$，求$\sum\limits_{i=s}^t\binom{F_i}{2}$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>這題也是有夠數學OwO<br>題目所求是$\sum\limits_{i=s}^t\frac{1}{2}{F_i(F_i - 1)}$<br>可以想到分別求$\sum\limits_{i=1}^nF_i$和$\sum\limits_{i=1}^nF_i^2$</p><p>前者可以用</p><script type="math/tex; mode=display">\left[\begin{matrix}0 & 1 & 0 \\1 & 1 & 0 \\1 & 1 & 1\end{matrix}\right]\left[\begin{matrix}F_{i-2} \\F_{i-1} \\S_{i-1}\end{matrix}\right] =\left[\begin{matrix}F_{i-1} \\F_i \\S_i\end{matrix}\right]</script><p>來得到前綴$S_i$的值</p><p>然後$F_i^2 = (F_{i-1}+F_{i-2})^2 = F_{i-1}^2 + F_{i-2}^2 + 2F_{i-1}F_{i-2}$<br>又有$F_iF_{i-1} = (F_{i-1}+F_{i-2})F_{i-1} = F_{i-1}F_{i-2} + F_{i-1}^2$<br>所以寫成</p><script type="math/tex; mode=display">\left[\begin{matrix}0 & 0 & 1 & 0 \\0 & 1 & 1 & 0 \\1 & 2 & 1 & 0 \\1 & 2 & 1 & 1\end{matrix}\right]\left[\begin{matrix}F_{i-2}^2 \\F_{i-1}F_{i-2} \\F_{i-1}^2 \\Q_{i-1}\end{matrix}\right]=\left[\begin{matrix}F_{i-1}^2 \\F_iF_{i-1} \\F_i^2 \\Q_i\end{matrix}\right]</script><p>可以得到二次的前綴</p><p>套上矩陣快速冪即可AC本題</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">1025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">512</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> ll <span class="title">modpow</span><span class="params">(ll e,ll p,ll m=MOD)</span> </span>&#123;ll r=<span class="number">1</span>; <span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,e=e*e%m) <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r=r*e%m; <span class="keyword">return</span> r;&#125;</span><br><span class="line"></span><br><span class="line">ll inv2 = modpow(<span class="number">2</span>,MOD<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;ll&gt;&gt; matrix;</span><br><span class="line">matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;a, <span class="keyword">const</span> matrix &amp;b) &#123;</span><br><span class="line">    <span class="function">matrix <span class="title">c</span><span class="params">(a.size(), <span class="built_in">vector</span>&lt;ll&gt;(b[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b.size(); k++) &#123;</span><br><span class="line">        ll r = a[i][k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b[k].size(); j++) c[i][j] = (c[i][j] + r*b[k][j]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span>^(matrix e, ll p) &#123;</span><br><span class="line">    <span class="function">matrix <span class="title">r</span><span class="params">(e.size(), <span class="built_in">vector</span>&lt;ll&gt;(e.size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e.size(); i++) r[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p&amp;<span class="number">1</span>) r = r*e;</span><br><span class="line">        e = e*e, p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        [F_&#123;n-1&#125;, F_n, S_n]</span></span><br><span class="line"><span class="comment">        [F_&#123;n-1&#125;^2, F_&#123;n-1&#125;F_n, F_n^2, Q_n]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    matrix S &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    matrix Q &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    matrix Rs = &#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    matrix Rq = &#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">0</span>&#125;,&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    S = (S^(n<span class="number">-1</span>)) * Rs;</span><br><span class="line">    Q = (Q^(n<span class="number">-1</span>)) * Rq;</span><br><span class="line">    <span class="keyword">return</span> (Q[<span class="number">3</span>][<span class="number">0</span>] - S[<span class="number">2</span>][<span class="number">0</span>] + MOD) * inv2 % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    ll t,a,b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (solve(b) - solve(a<span class="number">-1</span>) + MOD) % MOD &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這題的題源好像是NPSC? 不過我還是查不太到題解，可能太水了吧QQ</p>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIOJ-1282</title>
      <link href="/2019/12/04/TIOJ-1282/"/>
      <url>/2019/12/04/TIOJ-1282/</url>
      
        <content type="html"><![CDATA[<h1 id="愛蜜利雅的作業2"><a href="#愛蜜利雅的作業2" class="headerlink" title="愛蜜利雅的作業2"></a>愛蜜利雅的作業2</h1><p><a href="https://tioj.ck.tp.edu.tw/problems/1282" target="_blank" rel="noopener">https://tioj.ck.tp.edu.tw/problems/1282</a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>給定一個長度$n$的正整數序列，有$q$次操作，每次操作可能會對區間$[l,r]$加上$k$或詢問區間$[l,r]$的最大公因數<br>$1 \leq n,q \leq 10^5$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>想法是利用區間加值等於對差分的兩個單點修改<br>然後有一個性質是 $\gcd(a,b) = \gcd(a-b,b)$<br>所以$[l,r]$區間的GCD會等於$\gcd(\gcd(a_{l+1}-a_l, a_{l+2}-a_{l+1}, \dots, a_r-a_{r-1}), a_r)$之類的<br>求$a_r$可以用BIT就好，前面那項我則是用線段樹維護<br>複雜度$\mathcal{O}(n\log c + q\log n \log c)$</p><p>注意算完GCD要加絕對值，因為差分會出現負數，此時<code>__gcd</code>可能回傳負數</p><h2 id="AC-code"><a href="#AC-code" class="headerlink" title="AC code"></a>AC code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   __________________</span></span><br><span class="line"><span class="comment">//  | ________________ |</span></span><br><span class="line"><span class="comment">//  ||          ____  ||</span></span><br><span class="line"><span class="comment">//  ||   /\    |      ||</span></span><br><span class="line"><span class="comment">//  ||  /__\   |      ||</span></span><br><span class="line"><span class="comment">//  || /    \  |____  ||</span></span><br><span class="line"><span class="comment">//  ||________________||</span></span><br><span class="line"><span class="comment">//  |__________________|</span></span><br><span class="line"><span class="comment">//  \###################\</span></span><br><span class="line"><span class="comment">//   \###################\</span></span><br><span class="line"><span class="comment">//    \        ____       \</span></span><br><span class="line"><span class="comment">//     \_______\___\_______\</span></span><br><span class="line"><span class="comment">// An AC a day keeps the doctor away.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> g++ optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> loop_opt(on)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) (cerr&lt;&lt;#x&lt;&lt;<span class="meta-string">" = "</span>&lt;&lt;(x)&lt;&lt;<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// local</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll N = <span class="number">100025</span>, INF = <span class="number">1e18</span>, MOD = <span class="number">1000000007</span>, K = <span class="number">256</span>, inf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FenwickTree</span>&#123;</span></span><br><span class="line">    ll sum[N],n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll v[],<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = v[i] - v[i-(i&amp;-i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; p; p-=p&amp;-p) res += sum[p];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">int</span> p,ll d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; p&lt;=n; p+=p&amp;-p) sum[p] += d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; BIT;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">    ll seg[N&lt;&lt;<span class="number">1</span>],n;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll v[],<span class="keyword">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) seg[i+n] = v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) seg[i] = __gcd(seg[i&lt;&lt;<span class="number">1</span>],seg[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(l+=n,r+=n; l&lt;r; l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;<span class="number">1</span>) res = __gcd(res,seg[l++]);</span><br><span class="line">            <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res = __gcd(res,seg[--r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">int</span> p,ll d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(seg[p+=n]+=d; p&gt;<span class="number">1</span>; p&gt;&gt;=<span class="number">1</span>) seg[p&gt;&gt;<span class="number">1</span>] = __gcd(seg[p],seg[p^<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">ll v[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>), <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    BIT.init(v,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) v[i] = v[i+<span class="number">1</span>]-v[i];</span><br><span class="line">    sgt.init(v,n);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp,l,r;</span><br><span class="line">        ll k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tp;</span><br><span class="line">        <span class="keyword">if</span>(tp == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">            BIT.edit(l,k);</span><br><span class="line">            BIT.edit(r+<span class="number">1</span>,-k);</span><br><span class="line">            sgt.edit(l<span class="number">-1</span>,k);</span><br><span class="line">            sgt.edit(r,-k);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(__gcd(BIT.query(r), sgt.query(l,r))) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>註: 寫題解的時候一直TLE，後來發現是我的edit宣告成ll卻沒回傳東西orz…<br>似乎在TIOJ上宣告成非<code>void</code>的函數而不回傳值有機會出問題…</p>]]></content>
      
      
      
        <tags>
            
            <tag> TIOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/03/hello-world/"/>
      <url>/2019/12/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>這是一篇測試用的文章<br>A quick brown fox jumps over the lazy dog.</p><blockquote><p>引用文字</p></blockquote><h1 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h1><h2 id="二級標題"><a href="#二級標題" class="headerlink" title="二級標題"></a>二級標題</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello hexo"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo s -g</span><br><span class="line">$ <span class="built_in">echo</span> 7122</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
